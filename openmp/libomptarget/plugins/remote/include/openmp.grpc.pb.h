// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: openmp.proto
#ifndef GRPC_openmp_2eproto__INCLUDED
#define GRPC_openmp_2eproto__INCLUDED

#include "openmp.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace openmp {
namespace libomptarget {
namespace remote {

class RemoteOffload final {
 public:
  static constexpr char const* service_full_name() {
    return "openmp.libomptarget.remote.RemoteOffload";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::openmp::libomptarget::remote::I32* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> AsyncShutdown(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription& request, ::openmp::libomptarget::remote::I32* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> AsyncRegisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(AsyncRegisterLibRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> PrepareAsyncRegisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(PrepareAsyncRegisterLibRaw(context, request, cq));
    }
    virtual ::grpc::Status UnregisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer& request, ::openmp::libomptarget::remote::I32* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> AsyncUnregisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(AsyncUnregisterLibRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> PrepareAsyncUnregisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(PrepareAsyncUnregisterLibRaw(context, request, cq));
    }
    virtual ::grpc::Status IsValidBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr& request, ::openmp::libomptarget::remote::I32* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> AsyncIsValidBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(AsyncIsValidBinaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> PrepareAsyncIsValidBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(PrepareAsyncIsValidBinaryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNumberOfDevices(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::openmp::libomptarget::remote::I32* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> AsyncGetNumberOfDevices(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(AsyncGetNumberOfDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> PrepareAsyncGetNumberOfDevices(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(PrepareAsyncGetNumberOfDevicesRaw(context, request, cq));
    }
    virtual ::grpc::Status InitDevice(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32& request, ::openmp::libomptarget::remote::I32* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> AsyncInitDevice(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(AsyncInitDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> PrepareAsyncInitDevice(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(PrepareAsyncInitDeviceRaw(context, request, cq));
    }
    virtual ::grpc::Status InitRequires(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64& request, ::openmp::libomptarget::remote::I32* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> AsyncInitRequires(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(AsyncInitRequiresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> PrepareAsyncInitRequires(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(PrepareAsyncInitRequiresRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary& request, ::openmp::libomptarget::remote::TargetTable* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::TargetTable>> AsyncLoadBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::TargetTable>>(AsyncLoadBinaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::TargetTable>> PrepareAsyncLoadBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::TargetTable>>(PrepareAsyncLoadBinaryRaw(context, request, cq));
    }
    virtual ::grpc::Status DataAlloc(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData& request, ::openmp::libomptarget::remote::Pointer* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::Pointer>> AsyncDataAlloc(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::Pointer>>(AsyncDataAllocRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::Pointer>> PrepareAsyncDataAlloc(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::Pointer>>(PrepareAsyncDataAllocRaw(context, request, cq));
    }
    virtual ::grpc::Status DataDelete(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData& request, ::openmp::libomptarget::remote::I32* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> AsyncDataDelete(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(AsyncDataDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> PrepareAsyncDataDelete(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(PrepareAsyncDataDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::openmp::libomptarget::remote::SubmitData>> DataSubmit(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::openmp::libomptarget::remote::SubmitData>>(DataSubmitRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::openmp::libomptarget::remote::SubmitData>> AsyncDataSubmit(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::openmp::libomptarget::remote::SubmitData>>(AsyncDataSubmitRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::openmp::libomptarget::remote::SubmitData>> PrepareAsyncDataSubmit(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::openmp::libomptarget::remote::SubmitData>>(PrepareAsyncDataSubmitRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::openmp::libomptarget::remote::Data>> DataRetrieve(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::openmp::libomptarget::remote::Data>>(DataRetrieveRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::openmp::libomptarget::remote::Data>> AsyncDataRetrieve(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::openmp::libomptarget::remote::Data>>(AsyncDataRetrieveRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::openmp::libomptarget::remote::Data>> PrepareAsyncDataRetrieve(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::openmp::libomptarget::remote::Data>>(PrepareAsyncDataRetrieveRaw(context, request, cq));
    }
    virtual ::grpc::Status IsDataExchangeable(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair& request, ::openmp::libomptarget::remote::I32* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> AsyncIsDataExchangeable(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(AsyncIsDataExchangeableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> PrepareAsyncIsDataExchangeable(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(PrepareAsyncIsDataExchangeableRaw(context, request, cq));
    }
    virtual ::grpc::Status DataExchange(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData& request, ::openmp::libomptarget::remote::I32* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> AsyncDataExchange(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(AsyncDataExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> PrepareAsyncDataExchange(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(PrepareAsyncDataExchangeRaw(context, request, cq));
    }
    virtual ::grpc::Status RunTargetRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion& request, ::openmp::libomptarget::remote::I32* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> AsyncRunTargetRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(AsyncRunTargetRegionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> PrepareAsyncRunTargetRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(PrepareAsyncRunTargetRegionRaw(context, request, cq));
    }
    virtual ::grpc::Status RunTargetTeamRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion& request, ::openmp::libomptarget::remote::I32* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> AsyncRunTargetTeamRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(AsyncRunTargetTeamRegionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>> PrepareAsyncRunTargetTeamRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>>(PrepareAsyncRunTargetTeamRegionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Shutdown(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UnregisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnregisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IsValidBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsValidBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNumberOfDevices(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNumberOfDevices(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InitDevice(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitDevice(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InitRequires(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitRequires(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LoadBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary* request, ::openmp::libomptarget::remote::TargetTable* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary* request, ::openmp::libomptarget::remote::TargetTable* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DataAlloc(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData* request, ::openmp::libomptarget::remote::Pointer* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DataAlloc(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData* request, ::openmp::libomptarget::remote::Pointer* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DataDelete(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DataDelete(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DataSubmit(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientWriteReactor< ::openmp::libomptarget::remote::SubmitData>* reactor) = 0;
      virtual void DataRetrieve(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData* request, ::grpc::ClientReadReactor< ::openmp::libomptarget::remote::Data>* reactor) = 0;
      virtual void IsDataExchangeable(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsDataExchangeable(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DataExchange(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DataExchange(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RunTargetRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RunTargetRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RunTargetTeamRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RunTargetTeamRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* AsyncRegisterLibRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* PrepareAsyncRegisterLibRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* AsyncUnregisterLibRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* PrepareAsyncUnregisterLibRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* AsyncIsValidBinaryRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* PrepareAsyncIsValidBinaryRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* AsyncGetNumberOfDevicesRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* PrepareAsyncGetNumberOfDevicesRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* AsyncInitDeviceRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* PrepareAsyncInitDeviceRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* AsyncInitRequiresRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* PrepareAsyncInitRequiresRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::TargetTable>* AsyncLoadBinaryRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::TargetTable>* PrepareAsyncLoadBinaryRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::Pointer>* AsyncDataAllocRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::Pointer>* PrepareAsyncDataAllocRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* AsyncDataDeleteRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* PrepareAsyncDataDeleteRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::openmp::libomptarget::remote::SubmitData>* DataSubmitRaw(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::openmp::libomptarget::remote::SubmitData>* AsyncDataSubmitRaw(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::openmp::libomptarget::remote::SubmitData>* PrepareAsyncDataSubmitRaw(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::openmp::libomptarget::remote::Data>* DataRetrieveRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::openmp::libomptarget::remote::Data>* AsyncDataRetrieveRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::openmp::libomptarget::remote::Data>* PrepareAsyncDataRetrieveRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* AsyncIsDataExchangeableRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* PrepareAsyncIsDataExchangeableRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* AsyncDataExchangeRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* PrepareAsyncDataExchangeRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* AsyncRunTargetRegionRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* PrepareAsyncRunTargetRegionRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* AsyncRunTargetTeamRegionRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::openmp::libomptarget::remote::I32>* PrepareAsyncRunTargetTeamRegionRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::openmp::libomptarget::remote::I32* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> AsyncShutdown(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    ::grpc::Status RegisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription& request, ::openmp::libomptarget::remote::I32* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> AsyncRegisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(AsyncRegisterLibRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> PrepareAsyncRegisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(PrepareAsyncRegisterLibRaw(context, request, cq));
    }
    ::grpc::Status UnregisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer& request, ::openmp::libomptarget::remote::I32* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> AsyncUnregisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(AsyncUnregisterLibRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> PrepareAsyncUnregisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(PrepareAsyncUnregisterLibRaw(context, request, cq));
    }
    ::grpc::Status IsValidBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr& request, ::openmp::libomptarget::remote::I32* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> AsyncIsValidBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(AsyncIsValidBinaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> PrepareAsyncIsValidBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(PrepareAsyncIsValidBinaryRaw(context, request, cq));
    }
    ::grpc::Status GetNumberOfDevices(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::openmp::libomptarget::remote::I32* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> AsyncGetNumberOfDevices(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(AsyncGetNumberOfDevicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> PrepareAsyncGetNumberOfDevices(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(PrepareAsyncGetNumberOfDevicesRaw(context, request, cq));
    }
    ::grpc::Status InitDevice(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32& request, ::openmp::libomptarget::remote::I32* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> AsyncInitDevice(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(AsyncInitDeviceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> PrepareAsyncInitDevice(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(PrepareAsyncInitDeviceRaw(context, request, cq));
    }
    ::grpc::Status InitRequires(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64& request, ::openmp::libomptarget::remote::I32* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> AsyncInitRequires(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(AsyncInitRequiresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> PrepareAsyncInitRequires(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(PrepareAsyncInitRequiresRaw(context, request, cq));
    }
    ::grpc::Status LoadBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary& request, ::openmp::libomptarget::remote::TargetTable* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::TargetTable>> AsyncLoadBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::TargetTable>>(AsyncLoadBinaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::TargetTable>> PrepareAsyncLoadBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::TargetTable>>(PrepareAsyncLoadBinaryRaw(context, request, cq));
    }
    ::grpc::Status DataAlloc(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData& request, ::openmp::libomptarget::remote::Pointer* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::Pointer>> AsyncDataAlloc(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::Pointer>>(AsyncDataAllocRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::Pointer>> PrepareAsyncDataAlloc(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::Pointer>>(PrepareAsyncDataAllocRaw(context, request, cq));
    }
    ::grpc::Status DataDelete(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData& request, ::openmp::libomptarget::remote::I32* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> AsyncDataDelete(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(AsyncDataDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> PrepareAsyncDataDelete(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(PrepareAsyncDataDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::openmp::libomptarget::remote::SubmitData>> DataSubmit(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::openmp::libomptarget::remote::SubmitData>>(DataSubmitRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::openmp::libomptarget::remote::SubmitData>> AsyncDataSubmit(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::openmp::libomptarget::remote::SubmitData>>(AsyncDataSubmitRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::openmp::libomptarget::remote::SubmitData>> PrepareAsyncDataSubmit(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::openmp::libomptarget::remote::SubmitData>>(PrepareAsyncDataSubmitRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::openmp::libomptarget::remote::Data>> DataRetrieve(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::openmp::libomptarget::remote::Data>>(DataRetrieveRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::openmp::libomptarget::remote::Data>> AsyncDataRetrieve(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::openmp::libomptarget::remote::Data>>(AsyncDataRetrieveRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::openmp::libomptarget::remote::Data>> PrepareAsyncDataRetrieve(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::openmp::libomptarget::remote::Data>>(PrepareAsyncDataRetrieveRaw(context, request, cq));
    }
    ::grpc::Status IsDataExchangeable(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair& request, ::openmp::libomptarget::remote::I32* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> AsyncIsDataExchangeable(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(AsyncIsDataExchangeableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> PrepareAsyncIsDataExchangeable(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(PrepareAsyncIsDataExchangeableRaw(context, request, cq));
    }
    ::grpc::Status DataExchange(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData& request, ::openmp::libomptarget::remote::I32* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> AsyncDataExchange(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(AsyncDataExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> PrepareAsyncDataExchange(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(PrepareAsyncDataExchangeRaw(context, request, cq));
    }
    ::grpc::Status RunTargetRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion& request, ::openmp::libomptarget::remote::I32* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> AsyncRunTargetRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(AsyncRunTargetRegionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> PrepareAsyncRunTargetRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(PrepareAsyncRunTargetRegionRaw(context, request, cq));
    }
    ::grpc::Status RunTargetTeamRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion& request, ::openmp::libomptarget::remote::I32* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> AsyncRunTargetTeamRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(AsyncRunTargetTeamRegionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>> PrepareAsyncRunTargetTeamRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>>(PrepareAsyncRunTargetTeamRegionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Shutdown(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) override;
      void Shutdown(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) override;
      void RegisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnregisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) override;
      void UnregisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsValidBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) override;
      void IsValidBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNumberOfDevices(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) override;
      void GetNumberOfDevices(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InitDevice(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) override;
      void InitDevice(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InitRequires(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) override;
      void InitRequires(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LoadBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary* request, ::openmp::libomptarget::remote::TargetTable* response, std::function<void(::grpc::Status)>) override;
      void LoadBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary* request, ::openmp::libomptarget::remote::TargetTable* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DataAlloc(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData* request, ::openmp::libomptarget::remote::Pointer* response, std::function<void(::grpc::Status)>) override;
      void DataAlloc(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData* request, ::openmp::libomptarget::remote::Pointer* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DataDelete(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) override;
      void DataDelete(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DataSubmit(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientWriteReactor< ::openmp::libomptarget::remote::SubmitData>* reactor) override;
      void DataRetrieve(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData* request, ::grpc::ClientReadReactor< ::openmp::libomptarget::remote::Data>* reactor) override;
      void IsDataExchangeable(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) override;
      void IsDataExchangeable(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DataExchange(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) override;
      void DataExchange(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RunTargetRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) override;
      void RunTargetRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RunTargetTeamRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)>) override;
      void RunTargetTeamRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* AsyncRegisterLibRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* PrepareAsyncRegisterLibRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* AsyncUnregisterLibRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* PrepareAsyncUnregisterLibRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* AsyncIsValidBinaryRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* PrepareAsyncIsValidBinaryRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* AsyncGetNumberOfDevicesRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* PrepareAsyncGetNumberOfDevicesRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* AsyncInitDeviceRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* PrepareAsyncInitDeviceRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* AsyncInitRequiresRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* PrepareAsyncInitRequiresRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::TargetTable>* AsyncLoadBinaryRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::TargetTable>* PrepareAsyncLoadBinaryRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::Pointer>* AsyncDataAllocRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::Pointer>* PrepareAsyncDataAllocRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* AsyncDataDeleteRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* PrepareAsyncDataDeleteRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::openmp::libomptarget::remote::SubmitData>* DataSubmitRaw(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response) override;
    ::grpc::ClientAsyncWriter< ::openmp::libomptarget::remote::SubmitData>* AsyncDataSubmitRaw(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::openmp::libomptarget::remote::SubmitData>* PrepareAsyncDataSubmitRaw(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::openmp::libomptarget::remote::Data>* DataRetrieveRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request) override;
    ::grpc::ClientAsyncReader< ::openmp::libomptarget::remote::Data>* AsyncDataRetrieveRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::openmp::libomptarget::remote::Data>* PrepareAsyncDataRetrieveRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* AsyncIsDataExchangeableRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* PrepareAsyncIsDataExchangeableRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* AsyncDataExchangeRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* PrepareAsyncDataExchangeRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* AsyncRunTargetRegionRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* PrepareAsyncRunTargetRegionRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* AsyncRunTargetTeamRegionRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* PrepareAsyncRunTargetTeamRegionRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Shutdown_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterLib_;
    const ::grpc::internal::RpcMethod rpcmethod_UnregisterLib_;
    const ::grpc::internal::RpcMethod rpcmethod_IsValidBinary_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNumberOfDevices_;
    const ::grpc::internal::RpcMethod rpcmethod_InitDevice_;
    const ::grpc::internal::RpcMethod rpcmethod_InitRequires_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadBinary_;
    const ::grpc::internal::RpcMethod rpcmethod_DataAlloc_;
    const ::grpc::internal::RpcMethod rpcmethod_DataDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_DataSubmit_;
    const ::grpc::internal::RpcMethod rpcmethod_DataRetrieve_;
    const ::grpc::internal::RpcMethod rpcmethod_IsDataExchangeable_;
    const ::grpc::internal::RpcMethod rpcmethod_DataExchange_;
    const ::grpc::internal::RpcMethod rpcmethod_RunTargetRegion_;
    const ::grpc::internal::RpcMethod rpcmethod_RunTargetTeamRegion_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response);
    virtual ::grpc::Status RegisterLib(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription* request, ::openmp::libomptarget::remote::I32* response);
    virtual ::grpc::Status UnregisterLib(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::Pointer* request, ::openmp::libomptarget::remote::I32* response);
    virtual ::grpc::Status IsValidBinary(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* request, ::openmp::libomptarget::remote::I32* response);
    virtual ::grpc::Status GetNumberOfDevices(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response);
    virtual ::grpc::Status InitDevice(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::I32* request, ::openmp::libomptarget::remote::I32* response);
    virtual ::grpc::Status InitRequires(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::I64* request, ::openmp::libomptarget::remote::I32* response);
    virtual ::grpc::Status LoadBinary(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::Binary* request, ::openmp::libomptarget::remote::TargetTable* response);
    virtual ::grpc::Status DataAlloc(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::AllocData* request, ::openmp::libomptarget::remote::Pointer* response);
    virtual ::grpc::Status DataDelete(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::DeleteData* request, ::openmp::libomptarget::remote::I32* response);
    virtual ::grpc::Status DataSubmit(::grpc::ServerContext* context, ::grpc::ServerReader< ::openmp::libomptarget::remote::SubmitData>* reader, ::openmp::libomptarget::remote::I32* response);
    virtual ::grpc::Status DataRetrieve(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::RetrieveData* request, ::grpc::ServerWriter< ::openmp::libomptarget::remote::Data>* writer);
    virtual ::grpc::Status IsDataExchangeable(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::DevicePair* request, ::openmp::libomptarget::remote::I32* response);
    virtual ::grpc::Status DataExchange(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::ExchangeData* request, ::openmp::libomptarget::remote::I32* response);
    virtual ::grpc::Status RunTargetRegion(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::TargetRegion* request, ::openmp::libomptarget::remote::I32* response);
    virtual ::grpc::Status RunTargetTeamRegion(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion* request, ::openmp::libomptarget::remote::I32* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::openmp::libomptarget::remote::Null* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::I32>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterLib() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RegisterLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLib(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetBinaryDescription* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterLib(::grpc::ServerContext* context, ::openmp::libomptarget::remote::TargetBinaryDescription* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::I32>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnregisterLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnregisterLib() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UnregisterLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterLib(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Pointer* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterLib(::grpc::ServerContext* context, ::openmp::libomptarget::remote::Pointer* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::I32>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsValidBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsValidBinary() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_IsValidBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsValidBinary(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsValidBinary(::grpc::ServerContext* context, ::openmp::libomptarget::remote::TargetDeviceImagePtr* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::I32>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNumberOfDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNumberOfDevices() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetNumberOfDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberOfDevices(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNumberOfDevices(::grpc::ServerContext* context, ::openmp::libomptarget::remote::Null* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::I32>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InitDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InitDevice() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_InitDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDevice(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::I32* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitDevice(::grpc::ServerContext* context, ::openmp::libomptarget::remote::I32* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::I32>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InitRequires : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InitRequires() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_InitRequires() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitRequires(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::I64* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitRequires(::grpc::ServerContext* context, ::openmp::libomptarget::remote::I64* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::I32>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadBinary() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_LoadBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadBinary(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Binary* /*request*/, ::openmp::libomptarget::remote::TargetTable* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadBinary(::grpc::ServerContext* context, ::openmp::libomptarget::remote::Binary* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::TargetTable>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataAlloc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataAlloc() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DataAlloc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataAlloc(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::AllocData* /*request*/, ::openmp::libomptarget::remote::Pointer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataAlloc(::grpc::ServerContext* context, ::openmp::libomptarget::remote::AllocData* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::Pointer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataDelete() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DataDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataDelete(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::DeleteData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataDelete(::grpc::ServerContext* context, ::openmp::libomptarget::remote::DeleteData* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::I32>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataSubmit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataSubmit() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DataSubmit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataSubmit(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::openmp::libomptarget::remote::SubmitData>* /*reader*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataSubmit(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::SubmitData>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(10, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataRetrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataRetrieve() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_DataRetrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataRetrieve(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::RetrieveData* /*request*/, ::grpc::ServerWriter< ::openmp::libomptarget::remote::Data>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataRetrieve(::grpc::ServerContext* context, ::openmp::libomptarget::remote::RetrieveData* request, ::grpc::ServerAsyncWriter< ::openmp::libomptarget::remote::Data>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(11, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsDataExchangeable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsDataExchangeable() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_IsDataExchangeable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsDataExchangeable(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::DevicePair* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsDataExchangeable(::grpc::ServerContext* context, ::openmp::libomptarget::remote::DevicePair* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::I32>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DataExchange() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_DataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataExchange(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::ExchangeData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataExchange(::grpc::ServerContext* context, ::openmp::libomptarget::remote::ExchangeData* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::I32>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunTargetRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RunTargetRegion() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_RunTargetRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTargetRegion(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunTargetRegion(::grpc::ServerContext* context, ::openmp::libomptarget::remote::TargetRegion* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::I32>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunTargetTeamRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RunTargetTeamRegion() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_RunTargetTeamRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTargetTeamRegion(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetTeamRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunTargetTeamRegion(::grpc::ServerContext* context, ::openmp::libomptarget::remote::TargetTeamRegion* request, ::grpc::ServerAsyncResponseWriter< ::openmp::libomptarget::remote::I32>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Shutdown<WithAsyncMethod_RegisterLib<WithAsyncMethod_UnregisterLib<WithAsyncMethod_IsValidBinary<WithAsyncMethod_GetNumberOfDevices<WithAsyncMethod_InitDevice<WithAsyncMethod_InitRequires<WithAsyncMethod_LoadBinary<WithAsyncMethod_DataAlloc<WithAsyncMethod_DataDelete<WithAsyncMethod_DataSubmit<WithAsyncMethod_DataRetrieve<WithAsyncMethod_IsDataExchangeable<WithAsyncMethod_DataExchange<WithAsyncMethod_RunTargetRegion<WithAsyncMethod_RunTargetTeamRegion<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Shutdown() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response) { return this->Shutdown(context, request, response); }));}
    void SetMessageAllocatorFor_Shutdown(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterLib() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::TargetBinaryDescription, ::openmp::libomptarget::remote::I32>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription* request, ::openmp::libomptarget::remote::I32* response) { return this->RegisterLib(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterLib(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::TargetBinaryDescription, ::openmp::libomptarget::remote::I32>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::TargetBinaryDescription, ::openmp::libomptarget::remote::I32>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLib(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetBinaryDescription* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterLib(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetBinaryDescription* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnregisterLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnregisterLib() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::Pointer, ::openmp::libomptarget::remote::I32>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::Pointer* request, ::openmp::libomptarget::remote::I32* response) { return this->UnregisterLib(context, request, response); }));}
    void SetMessageAllocatorFor_UnregisterLib(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::Pointer, ::openmp::libomptarget::remote::I32>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::Pointer, ::openmp::libomptarget::remote::I32>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnregisterLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterLib(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Pointer* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnregisterLib(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::Pointer* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsValidBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsValidBinary() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::TargetDeviceImagePtr, ::openmp::libomptarget::remote::I32>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* request, ::openmp::libomptarget::remote::I32* response) { return this->IsValidBinary(context, request, response); }));}
    void SetMessageAllocatorFor_IsValidBinary(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::TargetDeviceImagePtr, ::openmp::libomptarget::remote::I32>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::TargetDeviceImagePtr, ::openmp::libomptarget::remote::I32>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsValidBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsValidBinary(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsValidBinary(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNumberOfDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNumberOfDevices() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response) { return this->GetNumberOfDevices(context, request, response); }));}
    void SetMessageAllocatorFor_GetNumberOfDevices(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNumberOfDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberOfDevices(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNumberOfDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InitDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InitDevice() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::I32>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::I32* request, ::openmp::libomptarget::remote::I32* response) { return this->InitDevice(context, request, response); }));}
    void SetMessageAllocatorFor_InitDevice(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::I32>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::I32>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InitDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDevice(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::I32* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::I32* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InitRequires : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InitRequires() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::I64, ::openmp::libomptarget::remote::I32>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::I64* request, ::openmp::libomptarget::remote::I32* response) { return this->InitRequires(context, request, response); }));}
    void SetMessageAllocatorFor_InitRequires(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::I64, ::openmp::libomptarget::remote::I32>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::I64, ::openmp::libomptarget::remote::I32>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InitRequires() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitRequires(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::I64* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitRequires(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::I64* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoadBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadBinary() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::Binary, ::openmp::libomptarget::remote::TargetTable>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::Binary* request, ::openmp::libomptarget::remote::TargetTable* response) { return this->LoadBinary(context, request, response); }));}
    void SetMessageAllocatorFor_LoadBinary(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::Binary, ::openmp::libomptarget::remote::TargetTable>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::Binary, ::openmp::libomptarget::remote::TargetTable>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LoadBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadBinary(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Binary* /*request*/, ::openmp::libomptarget::remote::TargetTable* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadBinary(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::Binary* /*request*/, ::openmp::libomptarget::remote::TargetTable* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DataAlloc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DataAlloc() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::AllocData, ::openmp::libomptarget::remote::Pointer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::AllocData* request, ::openmp::libomptarget::remote::Pointer* response) { return this->DataAlloc(context, request, response); }));}
    void SetMessageAllocatorFor_DataAlloc(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::AllocData, ::openmp::libomptarget::remote::Pointer>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::AllocData, ::openmp::libomptarget::remote::Pointer>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DataAlloc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataAlloc(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::AllocData* /*request*/, ::openmp::libomptarget::remote::Pointer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataAlloc(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::AllocData* /*request*/, ::openmp::libomptarget::remote::Pointer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DataDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DataDelete() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::DeleteData, ::openmp::libomptarget::remote::I32>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::DeleteData* request, ::openmp::libomptarget::remote::I32* response) { return this->DataDelete(context, request, response); }));}
    void SetMessageAllocatorFor_DataDelete(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::DeleteData, ::openmp::libomptarget::remote::I32>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::DeleteData, ::openmp::libomptarget::remote::I32>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DataDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataDelete(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::DeleteData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::DeleteData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DataSubmit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DataSubmit() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackClientStreamingHandler< ::openmp::libomptarget::remote::SubmitData, ::openmp::libomptarget::remote::I32>(
            [this](
                   ::grpc::CallbackServerContext* context, ::openmp::libomptarget::remote::I32* response) { return this->DataSubmit(context, response); }));
    }
    ~WithCallbackMethod_DataSubmit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataSubmit(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::openmp::libomptarget::remote::SubmitData>* /*reader*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::openmp::libomptarget::remote::SubmitData>* DataSubmit(
      ::grpc::CallbackServerContext* /*context*/, ::openmp::libomptarget::remote::I32* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DataRetrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DataRetrieve() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackServerStreamingHandler< ::openmp::libomptarget::remote::RetrieveData, ::openmp::libomptarget::remote::Data>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::RetrieveData* request) { return this->DataRetrieve(context, request); }));
    }
    ~WithCallbackMethod_DataRetrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataRetrieve(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::RetrieveData* /*request*/, ::grpc::ServerWriter< ::openmp::libomptarget::remote::Data>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::openmp::libomptarget::remote::Data>* DataRetrieve(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::RetrieveData* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsDataExchangeable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsDataExchangeable() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::DevicePair, ::openmp::libomptarget::remote::I32>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::DevicePair* request, ::openmp::libomptarget::remote::I32* response) { return this->IsDataExchangeable(context, request, response); }));}
    void SetMessageAllocatorFor_IsDataExchangeable(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::DevicePair, ::openmp::libomptarget::remote::I32>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::DevicePair, ::openmp::libomptarget::remote::I32>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsDataExchangeable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsDataExchangeable(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::DevicePair* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsDataExchangeable(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::DevicePair* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DataExchange() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::ExchangeData, ::openmp::libomptarget::remote::I32>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::ExchangeData* request, ::openmp::libomptarget::remote::I32* response) { return this->DataExchange(context, request, response); }));}
    void SetMessageAllocatorFor_DataExchange(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::ExchangeData, ::openmp::libomptarget::remote::I32>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::ExchangeData, ::openmp::libomptarget::remote::I32>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataExchange(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::ExchangeData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataExchange(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::ExchangeData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RunTargetRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RunTargetRegion() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::TargetRegion, ::openmp::libomptarget::remote::I32>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::TargetRegion* request, ::openmp::libomptarget::remote::I32* response) { return this->RunTargetRegion(context, request, response); }));}
    void SetMessageAllocatorFor_RunTargetRegion(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::TargetRegion, ::openmp::libomptarget::remote::I32>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::TargetRegion, ::openmp::libomptarget::remote::I32>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RunTargetRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTargetRegion(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RunTargetRegion(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RunTargetTeamRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RunTargetTeamRegion() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::TargetTeamRegion, ::openmp::libomptarget::remote::I32>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion* request, ::openmp::libomptarget::remote::I32* response) { return this->RunTargetTeamRegion(context, request, response); }));}
    void SetMessageAllocatorFor_RunTargetTeamRegion(
        ::grpc::MessageAllocator< ::openmp::libomptarget::remote::TargetTeamRegion, ::openmp::libomptarget::remote::I32>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::openmp::libomptarget::remote::TargetTeamRegion, ::openmp::libomptarget::remote::I32>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RunTargetTeamRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTargetTeamRegion(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetTeamRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RunTargetTeamRegion(
      ::grpc::CallbackServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetTeamRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Shutdown<WithCallbackMethod_RegisterLib<WithCallbackMethod_UnregisterLib<WithCallbackMethod_IsValidBinary<WithCallbackMethod_GetNumberOfDevices<WithCallbackMethod_InitDevice<WithCallbackMethod_InitRequires<WithCallbackMethod_LoadBinary<WithCallbackMethod_DataAlloc<WithCallbackMethod_DataDelete<WithCallbackMethod_DataSubmit<WithCallbackMethod_DataRetrieve<WithCallbackMethod_IsDataExchangeable<WithCallbackMethod_DataExchange<WithCallbackMethod_RunTargetRegion<WithCallbackMethod_RunTargetTeamRegion<Service > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterLib() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RegisterLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLib(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetBinaryDescription* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnregisterLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnregisterLib() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UnregisterLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterLib(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Pointer* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsValidBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsValidBinary() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_IsValidBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsValidBinary(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNumberOfDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNumberOfDevices() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetNumberOfDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberOfDevices(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InitDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InitDevice() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_InitDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDevice(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::I32* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InitRequires : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InitRequires() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_InitRequires() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitRequires(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::I64* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadBinary() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_LoadBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadBinary(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Binary* /*request*/, ::openmp::libomptarget::remote::TargetTable* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataAlloc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataAlloc() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DataAlloc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataAlloc(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::AllocData* /*request*/, ::openmp::libomptarget::remote::Pointer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataDelete() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DataDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataDelete(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::DeleteData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataSubmit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataSubmit() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DataSubmit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataSubmit(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::openmp::libomptarget::remote::SubmitData>* /*reader*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataRetrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataRetrieve() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_DataRetrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataRetrieve(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::RetrieveData* /*request*/, ::grpc::ServerWriter< ::openmp::libomptarget::remote::Data>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsDataExchangeable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsDataExchangeable() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_IsDataExchangeable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsDataExchangeable(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::DevicePair* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DataExchange() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_DataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataExchange(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::ExchangeData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunTargetRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RunTargetRegion() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_RunTargetRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTargetRegion(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunTargetTeamRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RunTargetTeamRegion() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_RunTargetTeamRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTargetTeamRegion(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetTeamRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Shutdown() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterLib() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RegisterLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLib(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetBinaryDescription* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterLib(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnregisterLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnregisterLib() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UnregisterLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterLib(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Pointer* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterLib(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsValidBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsValidBinary() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_IsValidBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsValidBinary(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsValidBinary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNumberOfDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNumberOfDevices() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetNumberOfDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberOfDevices(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNumberOfDevices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InitDevice() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_InitDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDevice(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::I32* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitDevice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitRequires : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InitRequires() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_InitRequires() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitRequires(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::I64* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitRequires(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadBinary() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_LoadBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadBinary(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Binary* /*request*/, ::openmp::libomptarget::remote::TargetTable* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadBinary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataAlloc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataAlloc() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DataAlloc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataAlloc(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::AllocData* /*request*/, ::openmp::libomptarget::remote::Pointer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataAlloc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataDelete() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DataDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataDelete(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::DeleteData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataSubmit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataSubmit() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DataSubmit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataSubmit(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::openmp::libomptarget::remote::SubmitData>* /*reader*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataSubmit(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(10, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataRetrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataRetrieve() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_DataRetrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataRetrieve(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::RetrieveData* /*request*/, ::grpc::ServerWriter< ::openmp::libomptarget::remote::Data>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataRetrieve(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(11, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsDataExchangeable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsDataExchangeable() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_IsDataExchangeable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsDataExchangeable(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::DevicePair* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsDataExchangeable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DataExchange() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_DataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataExchange(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::ExchangeData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDataExchange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunTargetRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RunTargetRegion() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_RunTargetRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTargetRegion(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunTargetRegion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunTargetTeamRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RunTargetTeamRegion() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_RunTargetTeamRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTargetTeamRegion(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetTeamRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunTargetTeamRegion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Shutdown() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Shutdown(context, request, response); }));
    }
    ~WithRawCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterLib() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterLib(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterLib(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetBinaryDescription* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterLib(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnregisterLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnregisterLib() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnregisterLib(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnregisterLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterLib(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Pointer* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnregisterLib(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsValidBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsValidBinary() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsValidBinary(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsValidBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsValidBinary(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsValidBinary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNumberOfDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNumberOfDevices() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNumberOfDevices(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNumberOfDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNumberOfDevices(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNumberOfDevices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InitDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InitDevice() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InitDevice(context, request, response); }));
    }
    ~WithRawCallbackMethod_InitDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitDevice(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::I32* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitDevice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InitRequires : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InitRequires() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InitRequires(context, request, response); }));
    }
    ~WithRawCallbackMethod_InitRequires() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitRequires(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::I64* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitRequires(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadBinary() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadBinary(context, request, response); }));
    }
    ~WithRawCallbackMethod_LoadBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadBinary(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Binary* /*request*/, ::openmp::libomptarget::remote::TargetTable* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadBinary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DataAlloc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DataAlloc() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DataAlloc(context, request, response); }));
    }
    ~WithRawCallbackMethod_DataAlloc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataAlloc(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::AllocData* /*request*/, ::openmp::libomptarget::remote::Pointer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataAlloc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DataDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DataDelete() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DataDelete(context, request, response); }));
    }
    ~WithRawCallbackMethod_DataDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataDelete(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::DeleteData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DataSubmit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DataSubmit() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->DataSubmit(context, response); }));
    }
    ~WithRawCallbackMethod_DataSubmit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataSubmit(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::openmp::libomptarget::remote::SubmitData>* /*reader*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* DataSubmit(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DataRetrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DataRetrieve() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->DataRetrieve(context, request); }));
    }
    ~WithRawCallbackMethod_DataRetrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataRetrieve(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::RetrieveData* /*request*/, ::grpc::ServerWriter< ::openmp::libomptarget::remote::Data>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* DataRetrieve(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsDataExchangeable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsDataExchangeable() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsDataExchangeable(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsDataExchangeable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsDataExchangeable(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::DevicePair* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsDataExchangeable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DataExchange() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DataExchange(context, request, response); }));
    }
    ~WithRawCallbackMethod_DataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DataExchange(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::ExchangeData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DataExchange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RunTargetRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RunTargetRegion() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RunTargetRegion(context, request, response); }));
    }
    ~WithRawCallbackMethod_RunTargetRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTargetRegion(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RunTargetRegion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RunTargetTeamRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RunTargetTeamRegion() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RunTargetTeamRegion(context, request, response); }));
    }
    ~WithRawCallbackMethod_RunTargetTeamRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTargetTeamRegion(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetTeamRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RunTargetTeamRegion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32>* streamer) {
                       return this->StreamedShutdown(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::Null,::openmp::libomptarget::remote::I32>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterLib() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::TargetBinaryDescription, ::openmp::libomptarget::remote::I32>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::TargetBinaryDescription, ::openmp::libomptarget::remote::I32>* streamer) {
                       return this->StreamedRegisterLib(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterLib(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetBinaryDescription* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterLib(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::TargetBinaryDescription,::openmp::libomptarget::remote::I32>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnregisterLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnregisterLib() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::Pointer, ::openmp::libomptarget::remote::I32>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::Pointer, ::openmp::libomptarget::remote::I32>* streamer) {
                       return this->StreamedUnregisterLib(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnregisterLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnregisterLib(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Pointer* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnregisterLib(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::Pointer,::openmp::libomptarget::remote::I32>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsValidBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsValidBinary() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::TargetDeviceImagePtr, ::openmp::libomptarget::remote::I32>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::TargetDeviceImagePtr, ::openmp::libomptarget::remote::I32>* streamer) {
                       return this->StreamedIsValidBinary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsValidBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsValidBinary(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsValidBinary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::TargetDeviceImagePtr,::openmp::libomptarget::remote::I32>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNumberOfDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNumberOfDevices() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32>* streamer) {
                       return this->StreamedGetNumberOfDevices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNumberOfDevices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNumberOfDevices(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Null* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNumberOfDevices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::Null,::openmp::libomptarget::remote::I32>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitDevice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InitDevice() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::I32>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::I32>* streamer) {
                       return this->StreamedInitDevice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InitDevice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitDevice(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::I32* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitDevice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::I32,::openmp::libomptarget::remote::I32>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitRequires : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InitRequires() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::I64, ::openmp::libomptarget::remote::I32>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::I64, ::openmp::libomptarget::remote::I32>* streamer) {
                       return this->StreamedInitRequires(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InitRequires() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitRequires(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::I64* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitRequires(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::I64,::openmp::libomptarget::remote::I32>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadBinary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadBinary() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::Binary, ::openmp::libomptarget::remote::TargetTable>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::Binary, ::openmp::libomptarget::remote::TargetTable>* streamer) {
                       return this->StreamedLoadBinary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadBinary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadBinary(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::Binary* /*request*/, ::openmp::libomptarget::remote::TargetTable* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadBinary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::Binary,::openmp::libomptarget::remote::TargetTable>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DataAlloc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DataAlloc() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::AllocData, ::openmp::libomptarget::remote::Pointer>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::AllocData, ::openmp::libomptarget::remote::Pointer>* streamer) {
                       return this->StreamedDataAlloc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DataAlloc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DataAlloc(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::AllocData* /*request*/, ::openmp::libomptarget::remote::Pointer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDataAlloc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::AllocData,::openmp::libomptarget::remote::Pointer>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DataDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DataDelete() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::DeleteData, ::openmp::libomptarget::remote::I32>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::DeleteData, ::openmp::libomptarget::remote::I32>* streamer) {
                       return this->StreamedDataDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DataDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DataDelete(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::DeleteData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDataDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::DeleteData,::openmp::libomptarget::remote::I32>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsDataExchangeable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsDataExchangeable() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::DevicePair, ::openmp::libomptarget::remote::I32>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::DevicePair, ::openmp::libomptarget::remote::I32>* streamer) {
                       return this->StreamedIsDataExchangeable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsDataExchangeable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsDataExchangeable(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::DevicePair* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsDataExchangeable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::DevicePair,::openmp::libomptarget::remote::I32>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DataExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DataExchange() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::ExchangeData, ::openmp::libomptarget::remote::I32>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::ExchangeData, ::openmp::libomptarget::remote::I32>* streamer) {
                       return this->StreamedDataExchange(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DataExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DataExchange(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::ExchangeData* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDataExchange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::ExchangeData,::openmp::libomptarget::remote::I32>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunTargetRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RunTargetRegion() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::TargetRegion, ::openmp::libomptarget::remote::I32>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::TargetRegion, ::openmp::libomptarget::remote::I32>* streamer) {
                       return this->StreamedRunTargetRegion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RunTargetRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunTargetRegion(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunTargetRegion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::TargetRegion,::openmp::libomptarget::remote::I32>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunTargetTeamRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RunTargetTeamRegion() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::openmp::libomptarget::remote::TargetTeamRegion, ::openmp::libomptarget::remote::I32>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::openmp::libomptarget::remote::TargetTeamRegion, ::openmp::libomptarget::remote::I32>* streamer) {
                       return this->StreamedRunTargetTeamRegion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RunTargetTeamRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunTargetTeamRegion(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::TargetTeamRegion* /*request*/, ::openmp::libomptarget::remote::I32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunTargetTeamRegion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::openmp::libomptarget::remote::TargetTeamRegion,::openmp::libomptarget::remote::I32>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_RegisterLib<WithStreamedUnaryMethod_UnregisterLib<WithStreamedUnaryMethod_IsValidBinary<WithStreamedUnaryMethod_GetNumberOfDevices<WithStreamedUnaryMethod_InitDevice<WithStreamedUnaryMethod_InitRequires<WithStreamedUnaryMethod_LoadBinary<WithStreamedUnaryMethod_DataAlloc<WithStreamedUnaryMethod_DataDelete<WithStreamedUnaryMethod_IsDataExchangeable<WithStreamedUnaryMethod_DataExchange<WithStreamedUnaryMethod_RunTargetRegion<WithStreamedUnaryMethod_RunTargetTeamRegion<Service > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_DataRetrieve : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DataRetrieve() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::openmp::libomptarget::remote::RetrieveData, ::openmp::libomptarget::remote::Data>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::openmp::libomptarget::remote::RetrieveData, ::openmp::libomptarget::remote::Data>* streamer) {
                       return this->StreamedDataRetrieve(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_DataRetrieve() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DataRetrieve(::grpc::ServerContext* /*context*/, const ::openmp::libomptarget::remote::RetrieveData* /*request*/, ::grpc::ServerWriter< ::openmp::libomptarget::remote::Data>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDataRetrieve(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::openmp::libomptarget::remote::RetrieveData,::openmp::libomptarget::remote::Data>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_DataRetrieve<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_RegisterLib<WithStreamedUnaryMethod_UnregisterLib<WithStreamedUnaryMethod_IsValidBinary<WithStreamedUnaryMethod_GetNumberOfDevices<WithStreamedUnaryMethod_InitDevice<WithStreamedUnaryMethod_InitRequires<WithStreamedUnaryMethod_LoadBinary<WithStreamedUnaryMethod_DataAlloc<WithStreamedUnaryMethod_DataDelete<WithSplitStreamingMethod_DataRetrieve<WithStreamedUnaryMethod_IsDataExchangeable<WithStreamedUnaryMethod_DataExchange<WithStreamedUnaryMethod_RunTargetRegion<WithStreamedUnaryMethod_RunTargetTeamRegion<Service > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace remote
}  // namespace libomptarget
}  // namespace openmp


#endif  // GRPC_openmp_2eproto__INCLUDED
