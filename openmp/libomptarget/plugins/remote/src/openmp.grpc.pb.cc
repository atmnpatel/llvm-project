// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: openmp.proto

#include "openmp.pb.h"
#include "openmp.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace openmp {
namespace libomptarget {
namespace remote {

static const char* RemoteOffload_method_names[] = {
  "/openmp.libomptarget.remote.RemoteOffload/Shutdown",
  "/openmp.libomptarget.remote.RemoteOffload/RegisterLib",
  "/openmp.libomptarget.remote.RemoteOffload/UnregisterLib",
  "/openmp.libomptarget.remote.RemoteOffload/IsValidBinary",
  "/openmp.libomptarget.remote.RemoteOffload/GetNumberOfDevices",
  "/openmp.libomptarget.remote.RemoteOffload/InitDevice",
  "/openmp.libomptarget.remote.RemoteOffload/InitRequires",
  "/openmp.libomptarget.remote.RemoteOffload/LoadBinary",
  "/openmp.libomptarget.remote.RemoteOffload/DataAlloc",
  "/openmp.libomptarget.remote.RemoteOffload/DataDelete",
  "/openmp.libomptarget.remote.RemoteOffload/DataSubmit",
  "/openmp.libomptarget.remote.RemoteOffload/DataRetrieve",
  "/openmp.libomptarget.remote.RemoteOffload/IsDataExchangeable",
  "/openmp.libomptarget.remote.RemoteOffload/DataExchange",
  "/openmp.libomptarget.remote.RemoteOffload/RunTargetRegion",
  "/openmp.libomptarget.remote.RemoteOffload/RunTargetTeamRegion",
};

std::unique_ptr< RemoteOffload::Stub> RemoteOffload::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RemoteOffload::Stub> stub(new RemoteOffload::Stub(channel, options));
  return stub;
}

RemoteOffload::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Shutdown_(RemoteOffload_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterLib_(RemoteOffload_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterLib_(RemoteOffload_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsValidBinary_(RemoteOffload_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNumberOfDevices_(RemoteOffload_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InitDevice_(RemoteOffload_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InitRequires_(RemoteOffload_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadBinary_(RemoteOffload_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataAlloc_(RemoteOffload_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataDelete_(RemoteOffload_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataSubmit_(RemoteOffload_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DataRetrieve_(RemoteOffload_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_IsDataExchangeable_(RemoteOffload_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DataExchange_(RemoteOffload_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunTargetRegion_(RemoteOffload_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunTargetTeamRegion_(RemoteOffload_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RemoteOffload::Stub::Shutdown(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::openmp::libomptarget::remote::I32* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Shutdown_, context, request, response);
}

void RemoteOffload::Stub::async::Shutdown(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::Shutdown(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::Null, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Shutdown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::AsyncShutdownRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutdownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteOffload::Stub::RegisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription& request, ::openmp::libomptarget::remote::I32* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::TargetBinaryDescription, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterLib_, context, request, response);
}

void RemoteOffload::Stub::async::RegisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::TargetBinaryDescription, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterLib_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::RegisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterLib_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::PrepareAsyncRegisterLibRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::TargetBinaryDescription, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterLib_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::AsyncRegisterLibRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterLibRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteOffload::Stub::UnregisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer& request, ::openmp::libomptarget::remote::I32* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::Pointer, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnregisterLib_, context, request, response);
}

void RemoteOffload::Stub::async::UnregisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::Pointer, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnregisterLib_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::UnregisterLib(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnregisterLib_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::PrepareAsyncUnregisterLibRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::Pointer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnregisterLib_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::AsyncUnregisterLibRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Pointer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnregisterLibRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteOffload::Stub::IsValidBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr& request, ::openmp::libomptarget::remote::I32* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::TargetDeviceImagePtr, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsValidBinary_, context, request, response);
}

void RemoteOffload::Stub::async::IsValidBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::TargetDeviceImagePtr, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsValidBinary_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::IsValidBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsValidBinary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::PrepareAsyncIsValidBinaryRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::TargetDeviceImagePtr, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsValidBinary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::AsyncIsValidBinaryRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsValidBinaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteOffload::Stub::GetNumberOfDevices(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::openmp::libomptarget::remote::I32* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNumberOfDevices_, context, request, response);
}

void RemoteOffload::Stub::async::GetNumberOfDevices(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNumberOfDevices_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::GetNumberOfDevices(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNumberOfDevices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::PrepareAsyncGetNumberOfDevicesRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::Null, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNumberOfDevices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::AsyncGetNumberOfDevicesRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Null& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNumberOfDevicesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteOffload::Stub::InitDevice(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32& request, ::openmp::libomptarget::remote::I32* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitDevice_, context, request, response);
}

void RemoteOffload::Stub::async::InitDevice(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitDevice_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::InitDevice(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::PrepareAsyncInitDeviceRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::AsyncInitDeviceRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I32& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteOffload::Stub::InitRequires(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64& request, ::openmp::libomptarget::remote::I32* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::I64, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitRequires_, context, request, response);
}

void RemoteOffload::Stub::async::InitRequires(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::I64, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitRequires_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::InitRequires(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitRequires_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::PrepareAsyncInitRequiresRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::I64, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitRequires_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::AsyncInitRequiresRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::I64& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitRequiresRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteOffload::Stub::LoadBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary& request, ::openmp::libomptarget::remote::TargetTable* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::Binary, ::openmp::libomptarget::remote::TargetTable, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoadBinary_, context, request, response);
}

void RemoteOffload::Stub::async::LoadBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary* request, ::openmp::libomptarget::remote::TargetTable* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::Binary, ::openmp::libomptarget::remote::TargetTable, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadBinary_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::LoadBinary(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary* request, ::openmp::libomptarget::remote::TargetTable* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadBinary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::TargetTable>* RemoteOffload::Stub::PrepareAsyncLoadBinaryRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::TargetTable, ::openmp::libomptarget::remote::Binary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoadBinary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::TargetTable>* RemoteOffload::Stub::AsyncLoadBinaryRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::Binary& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadBinaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteOffload::Stub::DataAlloc(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData& request, ::openmp::libomptarget::remote::Pointer* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::AllocData, ::openmp::libomptarget::remote::Pointer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DataAlloc_, context, request, response);
}

void RemoteOffload::Stub::async::DataAlloc(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData* request, ::openmp::libomptarget::remote::Pointer* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::AllocData, ::openmp::libomptarget::remote::Pointer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataAlloc_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::DataAlloc(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData* request, ::openmp::libomptarget::remote::Pointer* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataAlloc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::Pointer>* RemoteOffload::Stub::PrepareAsyncDataAllocRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::Pointer, ::openmp::libomptarget::remote::AllocData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DataAlloc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::Pointer>* RemoteOffload::Stub::AsyncDataAllocRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::AllocData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataAllocRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteOffload::Stub::DataDelete(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData& request, ::openmp::libomptarget::remote::I32* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::DeleteData, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DataDelete_, context, request, response);
}

void RemoteOffload::Stub::async::DataDelete(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::DeleteData, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataDelete_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::DataDelete(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::PrepareAsyncDataDeleteRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::DeleteData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DataDelete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::AsyncDataDeleteRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DeleteData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::openmp::libomptarget::remote::SubmitData>* RemoteOffload::Stub::DataSubmitRaw(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response) {
  return ::grpc::internal::ClientWriterFactory< ::openmp::libomptarget::remote::SubmitData>::Create(channel_.get(), rpcmethod_DataSubmit_, context, response);
}

void RemoteOffload::Stub::async::DataSubmit(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientWriteReactor< ::openmp::libomptarget::remote::SubmitData>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::openmp::libomptarget::remote::SubmitData>::Create(stub_->channel_.get(), stub_->rpcmethod_DataSubmit_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::openmp::libomptarget::remote::SubmitData>* RemoteOffload::Stub::AsyncDataSubmitRaw(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::openmp::libomptarget::remote::SubmitData>::Create(channel_.get(), cq, rpcmethod_DataSubmit_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::openmp::libomptarget::remote::SubmitData>* RemoteOffload::Stub::PrepareAsyncDataSubmitRaw(::grpc::ClientContext* context, ::openmp::libomptarget::remote::I32* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::openmp::libomptarget::remote::SubmitData>::Create(channel_.get(), cq, rpcmethod_DataSubmit_, context, response, false, nullptr);
}

::grpc::ClientReader< ::openmp::libomptarget::remote::Data>* RemoteOffload::Stub::DataRetrieveRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request) {
  return ::grpc::internal::ClientReaderFactory< ::openmp::libomptarget::remote::Data>::Create(channel_.get(), rpcmethod_DataRetrieve_, context, request);
}

void RemoteOffload::Stub::async::DataRetrieve(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData* request, ::grpc::ClientReadReactor< ::openmp::libomptarget::remote::Data>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::openmp::libomptarget::remote::Data>::Create(stub_->channel_.get(), stub_->rpcmethod_DataRetrieve_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::openmp::libomptarget::remote::Data>* RemoteOffload::Stub::AsyncDataRetrieveRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::openmp::libomptarget::remote::Data>::Create(channel_.get(), cq, rpcmethod_DataRetrieve_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::openmp::libomptarget::remote::Data>* RemoteOffload::Stub::PrepareAsyncDataRetrieveRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::RetrieveData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::openmp::libomptarget::remote::Data>::Create(channel_.get(), cq, rpcmethod_DataRetrieve_, context, request, false, nullptr);
}

::grpc::Status RemoteOffload::Stub::IsDataExchangeable(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair& request, ::openmp::libomptarget::remote::I32* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::DevicePair, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsDataExchangeable_, context, request, response);
}

void RemoteOffload::Stub::async::IsDataExchangeable(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::DevicePair, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsDataExchangeable_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::IsDataExchangeable(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsDataExchangeable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::PrepareAsyncIsDataExchangeableRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::DevicePair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsDataExchangeable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::AsyncIsDataExchangeableRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::DevicePair& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsDataExchangeableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteOffload::Stub::DataExchange(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData& request, ::openmp::libomptarget::remote::I32* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::ExchangeData, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DataExchange_, context, request, response);
}

void RemoteOffload::Stub::async::DataExchange(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::ExchangeData, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataExchange_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::DataExchange(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DataExchange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::PrepareAsyncDataExchangeRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::ExchangeData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DataExchange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::AsyncDataExchangeRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::ExchangeData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataExchangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteOffload::Stub::RunTargetRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion& request, ::openmp::libomptarget::remote::I32* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::TargetRegion, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RunTargetRegion_, context, request, response);
}

void RemoteOffload::Stub::async::RunTargetRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::TargetRegion, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunTargetRegion_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::RunTargetRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunTargetRegion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::PrepareAsyncRunTargetRegionRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::TargetRegion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RunTargetRegion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::AsyncRunTargetRegionRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetRegion& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunTargetRegionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteOffload::Stub::RunTargetTeamRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion& request, ::openmp::libomptarget::remote::I32* response) {
  return ::grpc::internal::BlockingUnaryCall< ::openmp::libomptarget::remote::TargetTeamRegion, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RunTargetTeamRegion_, context, request, response);
}

void RemoteOffload::Stub::async::RunTargetTeamRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion* request, ::openmp::libomptarget::remote::I32* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::openmp::libomptarget::remote::TargetTeamRegion, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunTargetTeamRegion_, context, request, response, std::move(f));
}

void RemoteOffload::Stub::async::RunTargetTeamRegion(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion* request, ::openmp::libomptarget::remote::I32* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunTargetTeamRegion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::PrepareAsyncRunTargetTeamRegionRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::TargetTeamRegion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RunTargetTeamRegion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::openmp::libomptarget::remote::I32>* RemoteOffload::Stub::AsyncRunTargetTeamRegionRaw(::grpc::ClientContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunTargetTeamRegionRaw(context, request, cq);
  result->StartCall();
  return result;
}

RemoteOffload::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::Null* req,
             ::openmp::libomptarget::remote::I32* resp) {
               return service->Shutdown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::TargetBinaryDescription, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::TargetBinaryDescription* req,
             ::openmp::libomptarget::remote::I32* resp) {
               return service->RegisterLib(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::Pointer, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::Pointer* req,
             ::openmp::libomptarget::remote::I32* resp) {
               return service->UnregisterLib(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::TargetDeviceImagePtr, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::TargetDeviceImagePtr* req,
             ::openmp::libomptarget::remote::I32* resp) {
               return service->IsValidBinary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::Null, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::Null* req,
             ::openmp::libomptarget::remote::I32* resp) {
               return service->GetNumberOfDevices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::I32, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::I32* req,
             ::openmp::libomptarget::remote::I32* resp) {
               return service->InitDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::I64, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::I64* req,
             ::openmp::libomptarget::remote::I32* resp) {
               return service->InitRequires(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::Binary, ::openmp::libomptarget::remote::TargetTable, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::Binary* req,
             ::openmp::libomptarget::remote::TargetTable* resp) {
               return service->LoadBinary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::AllocData, ::openmp::libomptarget::remote::Pointer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::AllocData* req,
             ::openmp::libomptarget::remote::Pointer* resp) {
               return service->DataAlloc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::DeleteData, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::DeleteData* req,
             ::openmp::libomptarget::remote::I32* resp) {
               return service->DataDelete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[10],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::SubmitData, ::openmp::libomptarget::remote::I32>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::openmp::libomptarget::remote::SubmitData>* reader,
             ::openmp::libomptarget::remote::I32* resp) {
               return service->DataSubmit(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::RetrieveData, ::openmp::libomptarget::remote::Data>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::RetrieveData* req,
             ::grpc::ServerWriter<::openmp::libomptarget::remote::Data>* writer) {
               return service->DataRetrieve(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::DevicePair, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::DevicePair* req,
             ::openmp::libomptarget::remote::I32* resp) {
               return service->IsDataExchangeable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::ExchangeData, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::ExchangeData* req,
             ::openmp::libomptarget::remote::I32* resp) {
               return service->DataExchange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::TargetRegion, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::TargetRegion* req,
             ::openmp::libomptarget::remote::I32* resp) {
               return service->RunTargetRegion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteOffload_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteOffload::Service, ::openmp::libomptarget::remote::TargetTeamRegion, ::openmp::libomptarget::remote::I32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteOffload::Service* service,
             ::grpc::ServerContext* ctx,
             const ::openmp::libomptarget::remote::TargetTeamRegion* req,
             ::openmp::libomptarget::remote::I32* resp) {
               return service->RunTargetTeamRegion(ctx, req, resp);
             }, this)));
}

RemoteOffload::Service::~Service() {
}

::grpc::Status RemoteOffload::Service::Shutdown(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::RegisterLib(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::TargetBinaryDescription* request, ::openmp::libomptarget::remote::I32* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::UnregisterLib(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::Pointer* request, ::openmp::libomptarget::remote::I32* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::IsValidBinary(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::TargetDeviceImagePtr* request, ::openmp::libomptarget::remote::I32* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::GetNumberOfDevices(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::Null* request, ::openmp::libomptarget::remote::I32* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::InitDevice(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::I32* request, ::openmp::libomptarget::remote::I32* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::InitRequires(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::I64* request, ::openmp::libomptarget::remote::I32* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::LoadBinary(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::Binary* request, ::openmp::libomptarget::remote::TargetTable* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::DataAlloc(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::AllocData* request, ::openmp::libomptarget::remote::Pointer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::DataDelete(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::DeleteData* request, ::openmp::libomptarget::remote::I32* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::DataSubmit(::grpc::ServerContext* context, ::grpc::ServerReader< ::openmp::libomptarget::remote::SubmitData>* reader, ::openmp::libomptarget::remote::I32* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::DataRetrieve(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::RetrieveData* request, ::grpc::ServerWriter< ::openmp::libomptarget::remote::Data>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::IsDataExchangeable(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::DevicePair* request, ::openmp::libomptarget::remote::I32* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::DataExchange(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::ExchangeData* request, ::openmp::libomptarget::remote::I32* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::RunTargetRegion(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::TargetRegion* request, ::openmp::libomptarget::remote::I32* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteOffload::Service::RunTargetTeamRegion(::grpc::ServerContext* context, const ::openmp::libomptarget::remote::TargetTeamRegion* request, ::openmp::libomptarget::remote::I32* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace openmp
}  // namespace libomptarget
}  // namespace remote

