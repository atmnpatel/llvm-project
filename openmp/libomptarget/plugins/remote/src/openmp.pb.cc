// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openmp.proto

#include "openmp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace openmp {
namespace libomptarget {
namespace remote {
PROTOBUF_CONSTEXPR Null::Null(
    ::_pbi::ConstantInitialized) {}
struct NullDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NullDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NullDefaultTypeInternal() {}
  union {
    Null _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NullDefaultTypeInternal _Null_default_instance_;
PROTOBUF_CONSTEXPR Pointer::Pointer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.number_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointerDefaultTypeInternal() {}
  union {
    Pointer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointerDefaultTypeInternal _Pointer_default_instance_;
PROTOBUF_CONSTEXPR I32::I32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct I32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR I32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~I32DefaultTypeInternal() {}
  union {
    I32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 I32DefaultTypeInternal _I32_default_instance_;
PROTOBUF_CONSTEXPR I64::I64(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.number_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct I64DefaultTypeInternal {
  PROTOBUF_CONSTEXPR I64DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~I64DefaultTypeInternal() {}
  union {
    I64 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 I64DefaultTypeInternal _I64_default_instance_;
PROTOBUF_CONSTEXPR DevicePair::DevicePair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_dev_id_)*/0
  , /*decltype(_impl_.dst_dev_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DevicePairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DevicePairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DevicePairDefaultTypeInternal() {}
  union {
    DevicePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DevicePairDefaultTypeInternal _DevicePair_default_instance_;
PROTOBUF_CONSTEXPR Binary::Binary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.device_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryDefaultTypeInternal() {}
  union {
    Binary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryDefaultTypeInternal _Binary_default_instance_;
PROTOBUF_CONSTEXPR TargetOffloadEntry::TargetOffloadEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flags_)*/0
  , /*decltype(_impl_.reserved_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TargetOffloadEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetOffloadEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetOffloadEntryDefaultTypeInternal() {}
  union {
    TargetOffloadEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetOffloadEntryDefaultTypeInternal _TargetOffloadEntry_default_instance_;
PROTOBUF_CONSTEXPR DeviceOffloadEntry::DeviceOffloadEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.addr_)*/uint64_t{0u}
  , /*decltype(_impl_.flags_)*/0
  , /*decltype(_impl_.reserved_)*/0
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceOffloadEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceOffloadEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceOffloadEntryDefaultTypeInternal() {}
  union {
    DeviceOffloadEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceOffloadEntryDefaultTypeInternal _DeviceOffloadEntry_default_instance_;
PROTOBUF_CONSTEXPR TargetTable::TargetTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.entry_ptrs_)*/{}
  , /*decltype(_impl_._entry_ptrs_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TargetTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetTableDefaultTypeInternal() {}
  union {
    TargetTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetTableDefaultTypeInternal _TargetTable_default_instance_;
PROTOBUF_CONSTEXPR TargetDeviceImagePtr::TargetDeviceImagePtr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entry_ptrs_)*/{}
  , /*decltype(_impl_._entry_ptrs_cached_byte_size_)*/{0}
  , /*decltype(_impl_.image_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TargetDeviceImagePtrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetDeviceImagePtrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetDeviceImagePtrDefaultTypeInternal() {}
  union {
    TargetDeviceImagePtr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetDeviceImagePtrDefaultTypeInternal _TargetDeviceImagePtr_default_instance_;
PROTOBUF_CONSTEXPR TargetDeviceImage::TargetDeviceImage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.binary_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TargetDeviceImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetDeviceImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetDeviceImageDefaultTypeInternal() {}
  union {
    TargetDeviceImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetDeviceImageDefaultTypeInternal _TargetDeviceImage_default_instance_;
PROTOBUF_CONSTEXPR ImagePtrs::ImagePtrs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entry_ptrs_)*/{}
  , /*decltype(_impl_._entry_ptrs_cached_byte_size_)*/{0}
  , /*decltype(_impl_.img_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImagePtrsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImagePtrsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImagePtrsDefaultTypeInternal() {}
  union {
    ImagePtrs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImagePtrsDefaultTypeInternal _ImagePtrs_default_instance_;
PROTOBUF_CONSTEXPR TargetBinaryDescription::TargetBinaryDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_ptrs_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.images_)*/{}
  , /*decltype(_impl_.entry_ptrs_)*/{}
  , /*decltype(_impl_._entry_ptrs_cached_byte_size_)*/{0}
  , /*decltype(_impl_.bin_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TargetBinaryDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetBinaryDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetBinaryDescriptionDefaultTypeInternal() {}
  union {
    TargetBinaryDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetBinaryDescriptionDefaultTypeInternal _TargetBinaryDescription_default_instance_;
PROTOBUF_CONSTEXPR AllocData::AllocData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.hst_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.device_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllocDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllocDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllocDataDefaultTypeInternal() {}
  union {
    AllocData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllocDataDefaultTypeInternal _AllocData_default_instance_;
PROTOBUF_CONSTEXPR SubmitData::SubmitData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hst_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.tgt_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.start_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.device_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubmitDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubmitDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubmitDataDefaultTypeInternal() {}
  union {
    SubmitData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubmitDataDefaultTypeInternal _SubmitData_default_instance_;
PROTOBUF_CONSTEXPR RetrieveData::RetrieveData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hst_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.tgt_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.device_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RetrieveDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RetrieveDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RetrieveDataDefaultTypeInternal() {}
  union {
    RetrieveData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RetrieveDataDefaultTypeInternal _RetrieveData_default_instance_;
PROTOBUF_CONSTEXPR Data::Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.ret_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataDefaultTypeInternal _Data_default_instance_;
PROTOBUF_CONSTEXPR ExchangeData::ExchangeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_dev_id_)*/uint64_t{0u}
  , /*decltype(_impl_.src_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.dst_dev_id_)*/uint64_t{0u}
  , /*decltype(_impl_.dst_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExchangeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExchangeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExchangeDataDefaultTypeInternal() {}
  union {
    ExchangeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExchangeDataDefaultTypeInternal _ExchangeData_default_instance_;
PROTOBUF_CONSTEXPR DeleteData::DeleteData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tgt_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.device_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteDataDefaultTypeInternal() {}
  union {
    DeleteData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteDataDefaultTypeInternal _DeleteData_default_instance_;
PROTOBUF_CONSTEXPR TargetRegion::TargetRegion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tgt_args_)*/{}
  , /*decltype(_impl_._tgt_args_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tgt_offsets_)*/{}
  , /*decltype(_impl_._tgt_offsets_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tgt_entry_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.device_id_)*/0
  , /*decltype(_impl_.arg_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TargetRegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetRegionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetRegionDefaultTypeInternal() {}
  union {
    TargetRegion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetRegionDefaultTypeInternal _TargetRegion_default_instance_;
PROTOBUF_CONSTEXPR TargetTeamRegion::TargetTeamRegion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tgt_args_)*/{}
  , /*decltype(_impl_._tgt_args_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tgt_offsets_)*/{}
  , /*decltype(_impl_._tgt_offsets_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tgt_entry_ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.loop_tripcount_)*/uint64_t{0u}
  , /*decltype(_impl_.device_id_)*/0
  , /*decltype(_impl_.arg_num_)*/0
  , /*decltype(_impl_.team_num_)*/0
  , /*decltype(_impl_.thread_limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TargetTeamRegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetTeamRegionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetTeamRegionDefaultTypeInternal() {}
  union {
    TargetTeamRegion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetTeamRegionDefaultTypeInternal _TargetTeamRegion_default_instance_;
}  // namespace remote
}  // namespace libomptarget
}  // namespace openmp
static ::_pb::Metadata file_level_metadata_openmp_2eproto[21];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_openmp_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_openmp_2eproto = nullptr;

const uint32_t TableStruct_openmp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::Null, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::Pointer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::Pointer, _impl_.number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::I32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::I32, _impl_.number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::I64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::I64, _impl_.number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::DevicePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::DevicePair, _impl_.src_dev_id_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::DevicePair, _impl_.dst_dev_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::Binary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::Binary, _impl_.image_ptr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::Binary, _impl_.device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetOffloadEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetOffloadEntry, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetOffloadEntry, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetOffloadEntry, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetOffloadEntry, _impl_.reserved_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::DeviceOffloadEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::DeviceOffloadEntry, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::DeviceOffloadEntry, _impl_.addr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::DeviceOffloadEntry, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::DeviceOffloadEntry, _impl_.reserved_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::DeviceOffloadEntry, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetTable, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetTable, _impl_.entry_ptrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetDeviceImagePtr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetDeviceImagePtr, _impl_.image_ptr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetDeviceImagePtr, _impl_.entry_ptrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetDeviceImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetDeviceImage, _impl_.binary_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetDeviceImage, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::ImagePtrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::ImagePtrs, _impl_.img_ptr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::ImagePtrs, _impl_.entry_ptrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetBinaryDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetBinaryDescription, _impl_.image_ptrs_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetBinaryDescription, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetBinaryDescription, _impl_.images_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetBinaryDescription, _impl_.entry_ptrs_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetBinaryDescription, _impl_.bin_ptr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::AllocData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::AllocData, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::AllocData, _impl_.hst_ptr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::AllocData, _impl_.device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::SubmitData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::SubmitData, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::SubmitData, _impl_.hst_ptr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::SubmitData, _impl_.tgt_ptr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::SubmitData, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::SubmitData, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::SubmitData, _impl_.device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::RetrieveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::RetrieveData, _impl_.hst_ptr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::RetrieveData, _impl_.tgt_ptr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::RetrieveData, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::RetrieveData, _impl_.device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::Data, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::Data, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::Data, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::Data, _impl_.ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::ExchangeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::ExchangeData, _impl_.src_dev_id_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::ExchangeData, _impl_.src_ptr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::ExchangeData, _impl_.dst_dev_id_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::ExchangeData, _impl_.dst_ptr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::ExchangeData, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::DeleteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::DeleteData, _impl_.tgt_ptr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::DeleteData, _impl_.device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetRegion, _impl_.tgt_args_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetRegion, _impl_.tgt_offsets_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetRegion, _impl_.tgt_entry_ptr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetRegion, _impl_.device_id_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetRegion, _impl_.arg_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetTeamRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetTeamRegion, _impl_.tgt_args_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetTeamRegion, _impl_.tgt_offsets_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetTeamRegion, _impl_.tgt_entry_ptr_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetTeamRegion, _impl_.loop_tripcount_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetTeamRegion, _impl_.device_id_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetTeamRegion, _impl_.arg_num_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetTeamRegion, _impl_.team_num_),
  PROTOBUF_FIELD_OFFSET(::openmp::libomptarget::remote::TargetTeamRegion, _impl_.thread_limit_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::openmp::libomptarget::remote::Null)},
  { 6, -1, -1, sizeof(::openmp::libomptarget::remote::Pointer)},
  { 13, -1, -1, sizeof(::openmp::libomptarget::remote::I32)},
  { 20, -1, -1, sizeof(::openmp::libomptarget::remote::I64)},
  { 27, -1, -1, sizeof(::openmp::libomptarget::remote::DevicePair)},
  { 35, -1, -1, sizeof(::openmp::libomptarget::remote::Binary)},
  { 43, -1, -1, sizeof(::openmp::libomptarget::remote::TargetOffloadEntry)},
  { 53, -1, -1, sizeof(::openmp::libomptarget::remote::DeviceOffloadEntry)},
  { 64, -1, -1, sizeof(::openmp::libomptarget::remote::TargetTable)},
  { 72, -1, -1, sizeof(::openmp::libomptarget::remote::TargetDeviceImagePtr)},
  { 80, -1, -1, sizeof(::openmp::libomptarget::remote::TargetDeviceImage)},
  { 88, -1, -1, sizeof(::openmp::libomptarget::remote::ImagePtrs)},
  { 96, -1, -1, sizeof(::openmp::libomptarget::remote::TargetBinaryDescription)},
  { 107, -1, -1, sizeof(::openmp::libomptarget::remote::AllocData)},
  { 116, -1, -1, sizeof(::openmp::libomptarget::remote::SubmitData)},
  { 128, -1, -1, sizeof(::openmp::libomptarget::remote::RetrieveData)},
  { 138, -1, -1, sizeof(::openmp::libomptarget::remote::Data)},
  { 148, -1, -1, sizeof(::openmp::libomptarget::remote::ExchangeData)},
  { 159, -1, -1, sizeof(::openmp::libomptarget::remote::DeleteData)},
  { 167, -1, -1, sizeof(::openmp::libomptarget::remote::TargetRegion)},
  { 178, -1, -1, sizeof(::openmp::libomptarget::remote::TargetTeamRegion)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::openmp::libomptarget::remote::_Null_default_instance_._instance,
  &::openmp::libomptarget::remote::_Pointer_default_instance_._instance,
  &::openmp::libomptarget::remote::_I32_default_instance_._instance,
  &::openmp::libomptarget::remote::_I64_default_instance_._instance,
  &::openmp::libomptarget::remote::_DevicePair_default_instance_._instance,
  &::openmp::libomptarget::remote::_Binary_default_instance_._instance,
  &::openmp::libomptarget::remote::_TargetOffloadEntry_default_instance_._instance,
  &::openmp::libomptarget::remote::_DeviceOffloadEntry_default_instance_._instance,
  &::openmp::libomptarget::remote::_TargetTable_default_instance_._instance,
  &::openmp::libomptarget::remote::_TargetDeviceImagePtr_default_instance_._instance,
  &::openmp::libomptarget::remote::_TargetDeviceImage_default_instance_._instance,
  &::openmp::libomptarget::remote::_ImagePtrs_default_instance_._instance,
  &::openmp::libomptarget::remote::_TargetBinaryDescription_default_instance_._instance,
  &::openmp::libomptarget::remote::_AllocData_default_instance_._instance,
  &::openmp::libomptarget::remote::_SubmitData_default_instance_._instance,
  &::openmp::libomptarget::remote::_RetrieveData_default_instance_._instance,
  &::openmp::libomptarget::remote::_Data_default_instance_._instance,
  &::openmp::libomptarget::remote::_ExchangeData_default_instance_._instance,
  &::openmp::libomptarget::remote::_DeleteData_default_instance_._instance,
  &::openmp::libomptarget::remote::_TargetRegion_default_instance_._instance,
  &::openmp::libomptarget::remote::_TargetTeamRegion_default_instance_._instance,
};

const char descriptor_table_protodef_openmp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014openmp.proto\022\032openmp.libomptarget.remo"
  "te\"\006\n\004Null\"\031\n\007Pointer\022\016\n\006number\030\001 \001(\004\"\025\n"
  "\003I32\022\016\n\006number\030\001 \001(\005\"\025\n\003I64\022\016\n\006number\030\001 "
  "\001(\003\"4\n\nDevicePair\022\022\n\nsrc_dev_id\030\001 \001(\005\022\022\n"
  "\ndst_dev_id\030\002 \001(\005\".\n\006Binary\022\021\n\timage_ptr"
  "\030\001 \001(\004\022\021\n\tdevice_id\030\002 \001(\005\"Q\n\022TargetOfflo"
  "adEntry\022\014\n\004data\030\001 \001(\014\022\014\n\004name\030\002 \001(\t\022\r\n\005f"
  "lags\030\003 \001(\005\022\020\n\010reserved\030\004 \001(\005\"_\n\022DeviceOf"
  "floadEntry\022\014\n\004name\030\001 \001(\t\022\014\n\004addr\030\002 \001(\004\022\r"
  "\n\005flags\030\003 \001(\005\022\020\n\010reserved\030\004 \001(\005\022\014\n\004size\030"
  "\005 \001(\005\"b\n\013TargetTable\022\?\n\007entries\030\001 \003(\0132.."
  "openmp.libomptarget.remote.DeviceOffload"
  "Entry\022\022\n\nentry_ptrs\030\002 \003(\004\"=\n\024TargetDevic"
  "eImagePtr\022\021\n\timage_ptr\030\001 \001(\004\022\022\n\nentry_pt"
  "rs\030\002 \003(\004\"d\n\021TargetDeviceImage\022\016\n\006binary\030"
  "\001 \001(\014\022\?\n\007entries\030\002 \003(\0132..openmp.libompta"
  "rget.remote.TargetOffloadEntry\"0\n\tImageP"
  "trs\022\017\n\007img_ptr\030\001 \001(\004\022\022\n\nentry_ptrs\030\002 \003(\004"
  "\"\371\001\n\027TargetBinaryDescription\0229\n\nimage_pt"
  "rs\030\001 \003(\0132%.openmp.libomptarget.remote.Im"
  "agePtrs\022\?\n\007entries\030\002 \003(\0132..openmp.libomp"
  "target.remote.TargetOffloadEntry\022=\n\006imag"
  "es\030\003 \003(\0132-.openmp.libomptarget.remote.Ta"
  "rgetDeviceImage\022\022\n\nentry_ptrs\030\004 \003(\004\022\017\n\007b"
  "in_ptr\030\005 \001(\004\"=\n\tAllocData\022\014\n\004size\030\001 \001(\004\022"
  "\017\n\007hst_ptr\030\002 \001(\004\022\021\n\tdevice_id\030\003 \001(\005\"l\n\nS"
  "ubmitData\022\014\n\004data\030\001 \001(\014\022\017\n\007hst_ptr\030\002 \001(\004"
  "\022\017\n\007tgt_ptr\030\003 \001(\004\022\r\n\005start\030\005 \001(\004\022\014\n\004size"
  "\030\006 \001(\004\022\021\n\tdevice_id\030\007 \001(\005\"Q\n\014RetrieveDat"
  "a\022\017\n\007hst_ptr\030\001 \001(\004\022\017\n\007tgt_ptr\030\002 \001(\004\022\014\n\004s"
  "ize\030\003 \001(\004\022\021\n\tdevice_id\030\005 \001(\005\">\n\004Data\022\014\n\004"
  "data\030\001 \001(\014\022\r\n\005start\030\002 \001(\004\022\014\n\004size\030\003 \001(\004\022"
  "\013\n\003ret\030\004 \001(\005\"f\n\014ExchangeData\022\022\n\nsrc_dev_"
  "id\030\001 \001(\004\022\017\n\007src_ptr\030\002 \001(\004\022\022\n\ndst_dev_id\030"
  "\003 \001(\004\022\017\n\007dst_ptr\030\004 \001(\004\022\014\n\004size\030\006 \001(\004\"0\n\n"
  "DeleteData\022\017\n\007tgt_ptr\030\001 \001(\004\022\021\n\tdevice_id"
  "\030\002 \001(\005\"p\n\014TargetRegion\022\020\n\010tgt_args\030\001 \003(\004"
  "\022\023\n\013tgt_offsets\030\002 \003(\003\022\025\n\rtgt_entry_ptr\030\003"
  " \001(\004\022\021\n\tdevice_id\030\004 \001(\005\022\017\n\007arg_num\030\005 \001(\005"
  "\"\264\001\n\020TargetTeamRegion\022\020\n\010tgt_args\030\001 \003(\004\022"
  "\023\n\013tgt_offsets\030\002 \003(\003\022\025\n\rtgt_entry_ptr\030\003 "
  "\001(\004\022\026\n\016loop_tripcount\030\004 \001(\004\022\021\n\tdevice_id"
  "\030\005 \001(\005\022\017\n\007arg_num\030\006 \001(\005\022\020\n\010team_num\030\007 \001("
  "\005\022\024\n\014thread_limit\030\010 \001(\0052\331\013\n\rRemoteOffloa"
  "d\022O\n\010Shutdown\022 .openmp.libomptarget.remo"
  "te.Null\032\037.openmp.libomptarget.remote.I32"
  "\"\000\022e\n\013RegisterLib\0223.openmp.libomptarget."
  "remote.TargetBinaryDescription\032\037.openmp."
  "libomptarget.remote.I32\"\000\022W\n\rUnregisterL"
  "ib\022#.openmp.libomptarget.remote.Pointer\032"
  "\037.openmp.libomptarget.remote.I32\"\000\022d\n\rIs"
  "ValidBinary\0220.openmp.libomptarget.remote"
  ".TargetDeviceImagePtr\032\037.openmp.libomptar"
  "get.remote.I32\"\000\022Y\n\022GetNumberOfDevices\022 "
  ".openmp.libomptarget.remote.Null\032\037.openm"
  "p.libomptarget.remote.I32\"\000\022P\n\nInitDevic"
  "e\022\037.openmp.libomptarget.remote.I32\032\037.ope"
  "nmp.libomptarget.remote.I32\"\000\022R\n\014InitReq"
  "uires\022\037.openmp.libomptarget.remote.I64\032\037"
  ".openmp.libomptarget.remote.I32\"\000\022[\n\nLoa"
  "dBinary\022\".openmp.libomptarget.remote.Bin"
  "ary\032\'.openmp.libomptarget.remote.TargetT"
  "able\"\000\022Y\n\tDataAlloc\022%.openmp.libomptarge"
  "t.remote.AllocData\032#.openmp.libomptarget"
  ".remote.Pointer\"\000\022W\n\nDataDelete\022&.openmp"
  ".libomptarget.remote.DeleteData\032\037.openmp"
  ".libomptarget.remote.I32\"\000\022Y\n\nDataSubmit"
  "\022&.openmp.libomptarget.remote.SubmitData"
  "\032\037.openmp.libomptarget.remote.I32\"\000(\001\022^\n"
  "\014DataRetrieve\022(.openmp.libomptarget.remo"
  "te.RetrieveData\032 .openmp.libomptarget.re"
  "mote.Data\"\0000\001\022_\n\022IsDataExchangeable\022&.op"
  "enmp.libomptarget.remote.DevicePair\032\037.op"
  "enmp.libomptarget.remote.I32\"\000\022[\n\014DataEx"
  "change\022(.openmp.libomptarget.remote.Exch"
  "angeData\032\037.openmp.libomptarget.remote.I3"
  "2\"\000\022^\n\017RunTargetRegion\022(.openmp.libompta"
  "rget.remote.TargetRegion\032\037.openmp.libomp"
  "target.remote.I32\"\000\022f\n\023RunTargetTeamRegi"
  "on\022,.openmp.libomptarget.remote.TargetTe"
  "amRegion\032\037.openmp.libomptarget.remote.I3"
  "2\"\000B\003\370\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_openmp_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_openmp_2eproto = {
    false, false, 3256, descriptor_table_protodef_openmp_2eproto,
    "openmp.proto",
    &descriptor_table_openmp_2eproto_once, nullptr, 0, 21,
    schemas, file_default_instances, TableStruct_openmp_2eproto::offsets,
    file_level_metadata_openmp_2eproto, file_level_enum_descriptors_openmp_2eproto,
    file_level_service_descriptors_openmp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_openmp_2eproto_getter() {
  return &descriptor_table_openmp_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_openmp_2eproto(&descriptor_table_openmp_2eproto);
namespace openmp {
namespace libomptarget {
namespace remote {

// ===================================================================

class Null::_Internal {
 public:
};

Null::Null(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.Null)
}
Null::Null(const Null& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Null* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.Null)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Null::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Null::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Null::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[0]);
}

// ===================================================================

class Pointer::_Internal {
 public:
};

Pointer::Pointer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.Pointer)
}
Pointer::Pointer(const Pointer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pointer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.number_ = from._impl_.number_;
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.Pointer)
}

inline void Pointer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pointer::~Pointer() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.Pointer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pointer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pointer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pointer::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.Pointer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.number_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pointer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pointer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.Pointer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 number = 1;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.Pointer)
  return target;
}

size_t Pointer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.Pointer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 number = 1;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pointer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pointer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pointer::GetClassData() const { return &_class_data_; }


void Pointer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pointer*>(&to_msg);
  auto& from = static_cast<const Pointer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.Pointer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pointer::CopyFrom(const Pointer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.Pointer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pointer::IsInitialized() const {
  return true;
}

void Pointer::InternalSwap(Pointer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.number_, other->_impl_.number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pointer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[1]);
}

// ===================================================================

class I32::_Internal {
 public:
};

I32::I32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.I32)
}
I32::I32(const I32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  I32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.number_ = from._impl_.number_;
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.I32)
}

inline void I32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

I32::~I32() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.I32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void I32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void I32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void I32::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.I32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* I32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* I32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.I32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.I32)
  return target;
}

size_t I32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.I32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData I32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    I32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*I32::GetClassData() const { return &_class_data_; }


void I32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<I32*>(&to_msg);
  auto& from = static_cast<const I32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.I32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void I32::CopyFrom(const I32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.I32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool I32::IsInitialized() const {
  return true;
}

void I32::InternalSwap(I32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.number_, other->_impl_.number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata I32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[2]);
}

// ===================================================================

class I64::_Internal {
 public:
};

I64::I64(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.I64)
}
I64::I64(const I64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  I64* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.number_ = from._impl_.number_;
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.I64)
}

inline void I64::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

I64::~I64() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.I64)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void I64::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void I64::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void I64::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.I64)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.number_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* I64::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* I64::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.I64)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 number = 1;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.I64)
  return target;
}

size_t I64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.I64)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 number = 1;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData I64::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    I64::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*I64::GetClassData() const { return &_class_data_; }


void I64::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<I64*>(&to_msg);
  auto& from = static_cast<const I64&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.I64)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void I64::CopyFrom(const I64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.I64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool I64::IsInitialized() const {
  return true;
}

void I64::InternalSwap(I64* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.number_, other->_impl_.number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata I64::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[3]);
}

// ===================================================================

class DevicePair::_Internal {
 public:
};

DevicePair::DevicePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.DevicePair)
}
DevicePair::DevicePair(const DevicePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DevicePair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_dev_id_){}
    , decltype(_impl_.dst_dev_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.src_dev_id_, &from._impl_.src_dev_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dst_dev_id_) -
    reinterpret_cast<char*>(&_impl_.src_dev_id_)) + sizeof(_impl_.dst_dev_id_));
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.DevicePair)
}

inline void DevicePair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_dev_id_){0}
    , decltype(_impl_.dst_dev_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DevicePair::~DevicePair() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.DevicePair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DevicePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DevicePair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DevicePair::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.DevicePair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.src_dev_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dst_dev_id_) -
      reinterpret_cast<char*>(&_impl_.src_dev_id_)) + sizeof(_impl_.dst_dev_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DevicePair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 src_dev_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.src_dev_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dst_dev_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dst_dev_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DevicePair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.DevicePair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src_dev_id = 1;
  if (this->_internal_src_dev_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_src_dev_id(), target);
  }

  // int32 dst_dev_id = 2;
  if (this->_internal_dst_dev_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_dst_dev_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.DevicePair)
  return target;
}

size_t DevicePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.DevicePair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 src_dev_id = 1;
  if (this->_internal_src_dev_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_src_dev_id());
  }

  // int32 dst_dev_id = 2;
  if (this->_internal_dst_dev_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dst_dev_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DevicePair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DevicePair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DevicePair::GetClassData() const { return &_class_data_; }


void DevicePair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DevicePair*>(&to_msg);
  auto& from = static_cast<const DevicePair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.DevicePair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_src_dev_id() != 0) {
    _this->_internal_set_src_dev_id(from._internal_src_dev_id());
  }
  if (from._internal_dst_dev_id() != 0) {
    _this->_internal_set_dst_dev_id(from._internal_dst_dev_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DevicePair::CopyFrom(const DevicePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.DevicePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevicePair::IsInitialized() const {
  return true;
}

void DevicePair::InternalSwap(DevicePair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DevicePair, _impl_.dst_dev_id_)
      + sizeof(DevicePair::_impl_.dst_dev_id_)
      - PROTOBUF_FIELD_OFFSET(DevicePair, _impl_.src_dev_id_)>(
          reinterpret_cast<char*>(&_impl_.src_dev_id_),
          reinterpret_cast<char*>(&other->_impl_.src_dev_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DevicePair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[4]);
}

// ===================================================================

class Binary::_Internal {
 public:
};

Binary::Binary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.Binary)
}
Binary::Binary(const Binary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Binary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_ptr_){}
    , decltype(_impl_.device_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.image_ptr_, &from._impl_.image_ptr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.device_id_) -
    reinterpret_cast<char*>(&_impl_.image_ptr_)) + sizeof(_impl_.device_id_));
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.Binary)
}

inline void Binary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_ptr_){uint64_t{0u}}
    , decltype(_impl_.device_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Binary::~Binary() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.Binary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Binary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Binary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Binary::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.Binary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.image_ptr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.device_id_) -
      reinterpret_cast<char*>(&_impl_.image_ptr_)) + sizeof(_impl_.device_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Binary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 image_ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.image_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Binary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.Binary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 image_ptr = 1;
  if (this->_internal_image_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_image_ptr(), target);
  }

  // int32 device_id = 2;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.Binary)
  return target;
}

size_t Binary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.Binary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 image_ptr = 1;
  if (this->_internal_image_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_image_ptr());
  }

  // int32 device_id = 2;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Binary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Binary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Binary::GetClassData() const { return &_class_data_; }


void Binary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Binary*>(&to_msg);
  auto& from = static_cast<const Binary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.Binary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_image_ptr() != 0) {
    _this->_internal_set_image_ptr(from._internal_image_ptr());
  }
  if (from._internal_device_id() != 0) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Binary::CopyFrom(const Binary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.Binary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Binary::IsInitialized() const {
  return true;
}

void Binary::InternalSwap(Binary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Binary, _impl_.device_id_)
      + sizeof(Binary::_impl_.device_id_)
      - PROTOBUF_FIELD_OFFSET(Binary, _impl_.image_ptr_)>(
          reinterpret_cast<char*>(&_impl_.image_ptr_),
          reinterpret_cast<char*>(&other->_impl_.image_ptr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Binary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[5]);
}

// ===================================================================

class TargetOffloadEntry::_Internal {
 public:
};

TargetOffloadEntry::TargetOffloadEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.TargetOffloadEntry)
}
TargetOffloadEntry::TargetOffloadEntry(const TargetOffloadEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TargetOffloadEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.reserved_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.flags_, &from._impl_.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reserved_) -
    reinterpret_cast<char*>(&_impl_.flags_)) + sizeof(_impl_.reserved_));
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.TargetOffloadEntry)
}

inline void TargetOffloadEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.flags_){0}
    , decltype(_impl_.reserved_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TargetOffloadEntry::~TargetOffloadEntry() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.TargetOffloadEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetOffloadEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.name_.Destroy();
}

void TargetOffloadEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetOffloadEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.TargetOffloadEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reserved_) -
      reinterpret_cast<char*>(&_impl_.flags_)) + sizeof(_impl_.reserved_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetOffloadEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "openmp.libomptarget.remote.TargetOffloadEntry.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reserved = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.reserved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetOffloadEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.TargetOffloadEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openmp.libomptarget.remote.TargetOffloadEntry.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_flags(), target);
  }

  // int32 reserved = 4;
  if (this->_internal_reserved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_reserved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.TargetOffloadEntry)
  return target;
}

size_t TargetOffloadEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.TargetOffloadEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
  }

  // int32 reserved = 4;
  if (this->_internal_reserved() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reserved());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetOffloadEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TargetOffloadEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetOffloadEntry::GetClassData() const { return &_class_data_; }


void TargetOffloadEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TargetOffloadEntry*>(&to_msg);
  auto& from = static_cast<const TargetOffloadEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.TargetOffloadEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  if (from._internal_reserved() != 0) {
    _this->_internal_set_reserved(from._internal_reserved());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetOffloadEntry::CopyFrom(const TargetOffloadEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.TargetOffloadEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetOffloadEntry::IsInitialized() const {
  return true;
}

void TargetOffloadEntry::InternalSwap(TargetOffloadEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetOffloadEntry, _impl_.reserved_)
      + sizeof(TargetOffloadEntry::_impl_.reserved_)
      - PROTOBUF_FIELD_OFFSET(TargetOffloadEntry, _impl_.flags_)>(
          reinterpret_cast<char*>(&_impl_.flags_),
          reinterpret_cast<char*>(&other->_impl_.flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetOffloadEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[6]);
}

// ===================================================================

class DeviceOffloadEntry::_Internal {
 public:
};

DeviceOffloadEntry::DeviceOffloadEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.DeviceOffloadEntry)
}
DeviceOffloadEntry::DeviceOffloadEntry(const DeviceOffloadEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceOffloadEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.reserved_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.addr_, &from._impl_.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.addr_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.DeviceOffloadEntry)
}

inline void DeviceOffloadEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.addr_){uint64_t{0u}}
    , decltype(_impl_.flags_){0}
    , decltype(_impl_.reserved_){0}
    , decltype(_impl_.size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceOffloadEntry::~DeviceOffloadEntry() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.DeviceOffloadEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceOffloadEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void DeviceOffloadEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceOffloadEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.DeviceOffloadEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.addr_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceOffloadEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "openmp.libomptarget.remote.DeviceOffloadEntry.name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reserved = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.reserved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceOffloadEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.DeviceOffloadEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openmp.libomptarget.remote.DeviceOffloadEntry.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 addr = 2;
  if (this->_internal_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_addr(), target);
  }

  // int32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_flags(), target);
  }

  // int32 reserved = 4;
  if (this->_internal_reserved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_reserved(), target);
  }

  // int32 size = 5;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.DeviceOffloadEntry)
  return target;
}

size_t DeviceOffloadEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.DeviceOffloadEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 addr = 2;
  if (this->_internal_addr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_addr());
  }

  // int32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
  }

  // int32 reserved = 4;
  if (this->_internal_reserved() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reserved());
  }

  // int32 size = 5;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceOffloadEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceOffloadEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceOffloadEntry::GetClassData() const { return &_class_data_; }


void DeviceOffloadEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceOffloadEntry*>(&to_msg);
  auto& from = static_cast<const DeviceOffloadEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.DeviceOffloadEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_addr() != 0) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  if (from._internal_reserved() != 0) {
    _this->_internal_set_reserved(from._internal_reserved());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceOffloadEntry::CopyFrom(const DeviceOffloadEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.DeviceOffloadEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceOffloadEntry::IsInitialized() const {
  return true;
}

void DeviceOffloadEntry::InternalSwap(DeviceOffloadEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceOffloadEntry, _impl_.size_)
      + sizeof(DeviceOffloadEntry::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(DeviceOffloadEntry, _impl_.addr_)>(
          reinterpret_cast<char*>(&_impl_.addr_),
          reinterpret_cast<char*>(&other->_impl_.addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceOffloadEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[7]);
}

// ===================================================================

class TargetTable::_Internal {
 public:
};

TargetTable::TargetTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.TargetTable)
}
TargetTable::TargetTable(const TargetTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TargetTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.entry_ptrs_){from._impl_.entry_ptrs_}
    , /*decltype(_impl_._entry_ptrs_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.TargetTable)
}

inline void TargetTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.entry_ptrs_){arena}
    , /*decltype(_impl_._entry_ptrs_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TargetTable::~TargetTable() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.TargetTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  _impl_.entry_ptrs_.~RepeatedField();
}

void TargetTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetTable::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.TargetTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _impl_.entry_ptrs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openmp.libomptarget.remote.DeviceOffloadEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 entry_ptrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_entry_ptrs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_entry_ptrs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.TargetTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openmp.libomptarget.remote.DeviceOffloadEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint64 entry_ptrs = 2;
  {
    int byte_size = _impl_._entry_ptrs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_entry_ptrs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.TargetTable)
  return target;
}

size_t TargetTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.TargetTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openmp.libomptarget.remote.DeviceOffloadEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 entry_ptrs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.entry_ptrs_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._entry_ptrs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TargetTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetTable::GetClassData() const { return &_class_data_; }


void TargetTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TargetTable*>(&to_msg);
  auto& from = static_cast<const TargetTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.TargetTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_impl_.entry_ptrs_.MergeFrom(from._impl_.entry_ptrs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetTable::CopyFrom(const TargetTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.TargetTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetTable::IsInitialized() const {
  return true;
}

void TargetTable::InternalSwap(TargetTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  _impl_.entry_ptrs_.InternalSwap(&other->_impl_.entry_ptrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[8]);
}

// ===================================================================

class TargetDeviceImagePtr::_Internal {
 public:
};

TargetDeviceImagePtr::TargetDeviceImagePtr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.TargetDeviceImagePtr)
}
TargetDeviceImagePtr::TargetDeviceImagePtr(const TargetDeviceImagePtr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TargetDeviceImagePtr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_ptrs_){from._impl_.entry_ptrs_}
    , /*decltype(_impl_._entry_ptrs_cached_byte_size_)*/{0}
    , decltype(_impl_.image_ptr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.image_ptr_ = from._impl_.image_ptr_;
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.TargetDeviceImagePtr)
}

inline void TargetDeviceImagePtr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_ptrs_){arena}
    , /*decltype(_impl_._entry_ptrs_cached_byte_size_)*/{0}
    , decltype(_impl_.image_ptr_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TargetDeviceImagePtr::~TargetDeviceImagePtr() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.TargetDeviceImagePtr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetDeviceImagePtr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_ptrs_.~RepeatedField();
}

void TargetDeviceImagePtr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetDeviceImagePtr::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.TargetDeviceImagePtr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_ptrs_.Clear();
  _impl_.image_ptr_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetDeviceImagePtr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 image_ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.image_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 entry_ptrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_entry_ptrs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_entry_ptrs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetDeviceImagePtr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.TargetDeviceImagePtr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 image_ptr = 1;
  if (this->_internal_image_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_image_ptr(), target);
  }

  // repeated uint64 entry_ptrs = 2;
  {
    int byte_size = _impl_._entry_ptrs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_entry_ptrs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.TargetDeviceImagePtr)
  return target;
}

size_t TargetDeviceImagePtr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.TargetDeviceImagePtr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 entry_ptrs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.entry_ptrs_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._entry_ptrs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 image_ptr = 1;
  if (this->_internal_image_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_image_ptr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetDeviceImagePtr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TargetDeviceImagePtr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetDeviceImagePtr::GetClassData() const { return &_class_data_; }


void TargetDeviceImagePtr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TargetDeviceImagePtr*>(&to_msg);
  auto& from = static_cast<const TargetDeviceImagePtr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.TargetDeviceImagePtr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_ptrs_.MergeFrom(from._impl_.entry_ptrs_);
  if (from._internal_image_ptr() != 0) {
    _this->_internal_set_image_ptr(from._internal_image_ptr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetDeviceImagePtr::CopyFrom(const TargetDeviceImagePtr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.TargetDeviceImagePtr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetDeviceImagePtr::IsInitialized() const {
  return true;
}

void TargetDeviceImagePtr::InternalSwap(TargetDeviceImagePtr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_ptrs_.InternalSwap(&other->_impl_.entry_ptrs_);
  swap(_impl_.image_ptr_, other->_impl_.image_ptr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetDeviceImagePtr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[9]);
}

// ===================================================================

class TargetDeviceImage::_Internal {
 public:
};

TargetDeviceImage::TargetDeviceImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.TargetDeviceImage)
}
TargetDeviceImage::TargetDeviceImage(const TargetDeviceImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TargetDeviceImage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.binary_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.binary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_binary().empty()) {
    _this->_impl_.binary_.Set(from._internal_binary(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.TargetDeviceImage)
}

inline void TargetDeviceImage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.binary_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.binary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TargetDeviceImage::~TargetDeviceImage() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.TargetDeviceImage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetDeviceImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  _impl_.binary_.Destroy();
}

void TargetDeviceImage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetDeviceImage::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.TargetDeviceImage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _impl_.binary_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetDeviceImage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes binary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_binary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .openmp.libomptarget.remote.TargetOffloadEntry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetDeviceImage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.TargetDeviceImage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes binary = 1;
  if (!this->_internal_binary().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_binary(), target);
  }

  // repeated .openmp.libomptarget.remote.TargetOffloadEntry entries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.TargetDeviceImage)
  return target;
}

size_t TargetDeviceImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.TargetDeviceImage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openmp.libomptarget.remote.TargetOffloadEntry entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes binary = 1;
  if (!this->_internal_binary().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_binary());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetDeviceImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TargetDeviceImage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetDeviceImage::GetClassData() const { return &_class_data_; }


void TargetDeviceImage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TargetDeviceImage*>(&to_msg);
  auto& from = static_cast<const TargetDeviceImage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.TargetDeviceImage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (!from._internal_binary().empty()) {
    _this->_internal_set_binary(from._internal_binary());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetDeviceImage::CopyFrom(const TargetDeviceImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.TargetDeviceImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetDeviceImage::IsInitialized() const {
  return true;
}

void TargetDeviceImage::InternalSwap(TargetDeviceImage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.binary_, lhs_arena,
      &other->_impl_.binary_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetDeviceImage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[10]);
}

// ===================================================================

class ImagePtrs::_Internal {
 public:
};

ImagePtrs::ImagePtrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.ImagePtrs)
}
ImagePtrs::ImagePtrs(const ImagePtrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImagePtrs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_ptrs_){from._impl_.entry_ptrs_}
    , /*decltype(_impl_._entry_ptrs_cached_byte_size_)*/{0}
    , decltype(_impl_.img_ptr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.img_ptr_ = from._impl_.img_ptr_;
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.ImagePtrs)
}

inline void ImagePtrs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_ptrs_){arena}
    , /*decltype(_impl_._entry_ptrs_cached_byte_size_)*/{0}
    , decltype(_impl_.img_ptr_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImagePtrs::~ImagePtrs() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.ImagePtrs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImagePtrs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_ptrs_.~RepeatedField();
}

void ImagePtrs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImagePtrs::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.ImagePtrs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_ptrs_.Clear();
  _impl_.img_ptr_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImagePtrs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 img_ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.img_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 entry_ptrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_entry_ptrs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_entry_ptrs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImagePtrs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.ImagePtrs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 img_ptr = 1;
  if (this->_internal_img_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_img_ptr(), target);
  }

  // repeated uint64 entry_ptrs = 2;
  {
    int byte_size = _impl_._entry_ptrs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_entry_ptrs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.ImagePtrs)
  return target;
}

size_t ImagePtrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.ImagePtrs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 entry_ptrs = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.entry_ptrs_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._entry_ptrs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 img_ptr = 1;
  if (this->_internal_img_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_img_ptr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImagePtrs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImagePtrs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImagePtrs::GetClassData() const { return &_class_data_; }


void ImagePtrs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImagePtrs*>(&to_msg);
  auto& from = static_cast<const ImagePtrs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.ImagePtrs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_ptrs_.MergeFrom(from._impl_.entry_ptrs_);
  if (from._internal_img_ptr() != 0) {
    _this->_internal_set_img_ptr(from._internal_img_ptr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImagePtrs::CopyFrom(const ImagePtrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.ImagePtrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagePtrs::IsInitialized() const {
  return true;
}

void ImagePtrs::InternalSwap(ImagePtrs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_ptrs_.InternalSwap(&other->_impl_.entry_ptrs_);
  swap(_impl_.img_ptr_, other->_impl_.img_ptr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagePtrs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[11]);
}

// ===================================================================

class TargetBinaryDescription::_Internal {
 public:
};

TargetBinaryDescription::TargetBinaryDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.TargetBinaryDescription)
}
TargetBinaryDescription::TargetBinaryDescription(const TargetBinaryDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TargetBinaryDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_ptrs_){from._impl_.image_ptrs_}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.images_){from._impl_.images_}
    , decltype(_impl_.entry_ptrs_){from._impl_.entry_ptrs_}
    , /*decltype(_impl_._entry_ptrs_cached_byte_size_)*/{0}
    , decltype(_impl_.bin_ptr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bin_ptr_ = from._impl_.bin_ptr_;
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.TargetBinaryDescription)
}

inline void TargetBinaryDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_ptrs_){arena}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.images_){arena}
    , decltype(_impl_.entry_ptrs_){arena}
    , /*decltype(_impl_._entry_ptrs_cached_byte_size_)*/{0}
    , decltype(_impl_.bin_ptr_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TargetBinaryDescription::~TargetBinaryDescription() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.TargetBinaryDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetBinaryDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_ptrs_.~RepeatedPtrField();
  _impl_.entries_.~RepeatedPtrField();
  _impl_.images_.~RepeatedPtrField();
  _impl_.entry_ptrs_.~RepeatedField();
}

void TargetBinaryDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetBinaryDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.TargetBinaryDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_ptrs_.Clear();
  _impl_.entries_.Clear();
  _impl_.images_.Clear();
  _impl_.entry_ptrs_.Clear();
  _impl_.bin_ptr_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetBinaryDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openmp.libomptarget.remote.ImagePtrs image_ptrs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_ptrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .openmp.libomptarget.remote.TargetOffloadEntry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .openmp.libomptarget.remote.TargetDeviceImage images = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 entry_ptrs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_entry_ptrs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_entry_ptrs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 bin_ptr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.bin_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetBinaryDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.TargetBinaryDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openmp.libomptarget.remote.ImagePtrs image_ptrs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_ptrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_image_ptrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .openmp.libomptarget.remote.TargetOffloadEntry entries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .openmp.libomptarget.remote.TargetDeviceImage images = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_images_size()); i < n; i++) {
    const auto& repfield = this->_internal_images(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint64 entry_ptrs = 4;
  {
    int byte_size = _impl_._entry_ptrs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_entry_ptrs(), byte_size, target);
    }
  }

  // uint64 bin_ptr = 5;
  if (this->_internal_bin_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bin_ptr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.TargetBinaryDescription)
  return target;
}

size_t TargetBinaryDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.TargetBinaryDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openmp.libomptarget.remote.ImagePtrs image_ptrs = 1;
  total_size += 1UL * this->_internal_image_ptrs_size();
  for (const auto& msg : this->_impl_.image_ptrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openmp.libomptarget.remote.TargetOffloadEntry entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openmp.libomptarget.remote.TargetDeviceImage images = 3;
  total_size += 1UL * this->_internal_images_size();
  for (const auto& msg : this->_impl_.images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 entry_ptrs = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.entry_ptrs_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._entry_ptrs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 bin_ptr = 5;
  if (this->_internal_bin_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bin_ptr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetBinaryDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TargetBinaryDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetBinaryDescription::GetClassData() const { return &_class_data_; }


void TargetBinaryDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TargetBinaryDescription*>(&to_msg);
  auto& from = static_cast<const TargetBinaryDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.TargetBinaryDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.image_ptrs_.MergeFrom(from._impl_.image_ptrs_);
  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_impl_.images_.MergeFrom(from._impl_.images_);
  _this->_impl_.entry_ptrs_.MergeFrom(from._impl_.entry_ptrs_);
  if (from._internal_bin_ptr() != 0) {
    _this->_internal_set_bin_ptr(from._internal_bin_ptr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetBinaryDescription::CopyFrom(const TargetBinaryDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.TargetBinaryDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetBinaryDescription::IsInitialized() const {
  return true;
}

void TargetBinaryDescription::InternalSwap(TargetBinaryDescription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.image_ptrs_.InternalSwap(&other->_impl_.image_ptrs_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  _impl_.images_.InternalSwap(&other->_impl_.images_);
  _impl_.entry_ptrs_.InternalSwap(&other->_impl_.entry_ptrs_);
  swap(_impl_.bin_ptr_, other->_impl_.bin_ptr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetBinaryDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[12]);
}

// ===================================================================

class AllocData::_Internal {
 public:
};

AllocData::AllocData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.AllocData)
}
AllocData::AllocData(const AllocData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllocData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){}
    , decltype(_impl_.hst_ptr_){}
    , decltype(_impl_.device_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.device_id_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.device_id_));
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.AllocData)
}

inline void AllocData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.hst_ptr_){uint64_t{0u}}
    , decltype(_impl_.device_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AllocData::~AllocData() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.AllocData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllocData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AllocData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllocData::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.AllocData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.device_id_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.device_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 hst_ptr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hst_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 device_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllocData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.AllocData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_size(), target);
  }

  // uint64 hst_ptr = 2;
  if (this->_internal_hst_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_hst_ptr(), target);
  }

  // int32 device_id = 3;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.AllocData)
  return target;
}

size_t AllocData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.AllocData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // uint64 hst_ptr = 2;
  if (this->_internal_hst_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hst_ptr());
  }

  // int32 device_id = 3;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllocData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllocData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllocData::GetClassData() const { return &_class_data_; }


void AllocData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllocData*>(&to_msg);
  auto& from = static_cast<const AllocData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.AllocData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_hst_ptr() != 0) {
    _this->_internal_set_hst_ptr(from._internal_hst_ptr());
  }
  if (from._internal_device_id() != 0) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllocData::CopyFrom(const AllocData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.AllocData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocData::IsInitialized() const {
  return true;
}

void AllocData::InternalSwap(AllocData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllocData, _impl_.device_id_)
      + sizeof(AllocData::_impl_.device_id_)
      - PROTOBUF_FIELD_OFFSET(AllocData, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[13]);
}

// ===================================================================

class SubmitData::_Internal {
 public:
};

SubmitData::SubmitData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.SubmitData)
}
SubmitData::SubmitData(const SubmitData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubmitData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.hst_ptr_){}
    , decltype(_impl_.tgt_ptr_){}
    , decltype(_impl_.start_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.device_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.hst_ptr_, &from._impl_.hst_ptr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.device_id_) -
    reinterpret_cast<char*>(&_impl_.hst_ptr_)) + sizeof(_impl_.device_id_));
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.SubmitData)
}

inline void SubmitData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.hst_ptr_){uint64_t{0u}}
    , decltype(_impl_.tgt_ptr_){uint64_t{0u}}
    , decltype(_impl_.start_){uint64_t{0u}}
    , decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.device_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubmitData::~SubmitData() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.SubmitData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubmitData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void SubmitData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubmitData::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.SubmitData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.hst_ptr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.device_id_) -
      reinterpret_cast<char*>(&_impl_.hst_ptr_)) + sizeof(_impl_.device_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubmitData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 hst_ptr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hst_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tgt_ptr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tgt_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 device_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubmitData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.SubmitData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // uint64 hst_ptr = 2;
  if (this->_internal_hst_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_hst_ptr(), target);
  }

  // uint64 tgt_ptr = 3;
  if (this->_internal_tgt_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tgt_ptr(), target);
  }

  // uint64 start = 5;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_start(), target);
  }

  // uint64 size = 6;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_size(), target);
  }

  // int32 device_id = 7;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.SubmitData)
  return target;
}

size_t SubmitData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.SubmitData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 hst_ptr = 2;
  if (this->_internal_hst_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hst_ptr());
  }

  // uint64 tgt_ptr = 3;
  if (this->_internal_tgt_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tgt_ptr());
  }

  // uint64 start = 5;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start());
  }

  // uint64 size = 6;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // int32 device_id = 7;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubmitData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubmitData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubmitData::GetClassData() const { return &_class_data_; }


void SubmitData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubmitData*>(&to_msg);
  auto& from = static_cast<const SubmitData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.SubmitData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_hst_ptr() != 0) {
    _this->_internal_set_hst_ptr(from._internal_hst_ptr());
  }
  if (from._internal_tgt_ptr() != 0) {
    _this->_internal_set_tgt_ptr(from._internal_tgt_ptr());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_device_id() != 0) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubmitData::CopyFrom(const SubmitData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.SubmitData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitData::IsInitialized() const {
  return true;
}

void SubmitData::InternalSwap(SubmitData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubmitData, _impl_.device_id_)
      + sizeof(SubmitData::_impl_.device_id_)
      - PROTOBUF_FIELD_OFFSET(SubmitData, _impl_.hst_ptr_)>(
          reinterpret_cast<char*>(&_impl_.hst_ptr_),
          reinterpret_cast<char*>(&other->_impl_.hst_ptr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubmitData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[14]);
}

// ===================================================================

class RetrieveData::_Internal {
 public:
};

RetrieveData::RetrieveData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.RetrieveData)
}
RetrieveData::RetrieveData(const RetrieveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RetrieveData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hst_ptr_){}
    , decltype(_impl_.tgt_ptr_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.device_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hst_ptr_, &from._impl_.hst_ptr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.device_id_) -
    reinterpret_cast<char*>(&_impl_.hst_ptr_)) + sizeof(_impl_.device_id_));
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.RetrieveData)
}

inline void RetrieveData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hst_ptr_){uint64_t{0u}}
    , decltype(_impl_.tgt_ptr_){uint64_t{0u}}
    , decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.device_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RetrieveData::~RetrieveData() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.RetrieveData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RetrieveData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RetrieveData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RetrieveData::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.RetrieveData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hst_ptr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.device_id_) -
      reinterpret_cast<char*>(&_impl_.hst_ptr_)) + sizeof(_impl_.device_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetrieveData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hst_ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hst_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tgt_ptr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tgt_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 device_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RetrieveData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.RetrieveData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hst_ptr = 1;
  if (this->_internal_hst_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hst_ptr(), target);
  }

  // uint64 tgt_ptr = 2;
  if (this->_internal_tgt_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tgt_ptr(), target);
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  // int32 device_id = 5;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.RetrieveData)
  return target;
}

size_t RetrieveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.RetrieveData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hst_ptr = 1;
  if (this->_internal_hst_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hst_ptr());
  }

  // uint64 tgt_ptr = 2;
  if (this->_internal_tgt_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tgt_ptr());
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // int32 device_id = 5;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RetrieveData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RetrieveData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RetrieveData::GetClassData() const { return &_class_data_; }


void RetrieveData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RetrieveData*>(&to_msg);
  auto& from = static_cast<const RetrieveData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.RetrieveData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hst_ptr() != 0) {
    _this->_internal_set_hst_ptr(from._internal_hst_ptr());
  }
  if (from._internal_tgt_ptr() != 0) {
    _this->_internal_set_tgt_ptr(from._internal_tgt_ptr());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_device_id() != 0) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RetrieveData::CopyFrom(const RetrieveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.RetrieveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveData::IsInitialized() const {
  return true;
}

void RetrieveData::InternalSwap(RetrieveData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RetrieveData, _impl_.device_id_)
      + sizeof(RetrieveData::_impl_.device_id_)
      - PROTOBUF_FIELD_OFFSET(RetrieveData, _impl_.hst_ptr_)>(
          reinterpret_cast<char*>(&_impl_.hst_ptr_),
          reinterpret_cast<char*>(&other->_impl_.hst_ptr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RetrieveData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[15]);
}

// ===================================================================

class Data::_Internal {
 public:
};

Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.start_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.ret_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ret_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.ret_));
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.Data)
}

inline void Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.start_){uint64_t{0u}}
    , decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.ret_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ret_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.ret_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // uint64 start = 2;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_start(), target);
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  // int32 ret = 4;
  if (this->_internal_ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 start = 2;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start());
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // int32 ret = 4;
  if (this->_internal_ret() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Data::GetClassData() const { return &_class_data_; }


void Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Data*>(&to_msg);
  auto& from = static_cast<const Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_ret() != 0) {
    _this->_internal_set_ret(from._internal_ret());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data, _impl_.ret_)
      + sizeof(Data::_impl_.ret_)
      - PROTOBUF_FIELD_OFFSET(Data, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[16]);
}

// ===================================================================

class ExchangeData::_Internal {
 public:
};

ExchangeData::ExchangeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.ExchangeData)
}
ExchangeData::ExchangeData(const ExchangeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExchangeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_dev_id_){}
    , decltype(_impl_.src_ptr_){}
    , decltype(_impl_.dst_dev_id_){}
    , decltype(_impl_.dst_ptr_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.src_dev_id_, &from._impl_.src_dev_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.src_dev_id_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.ExchangeData)
}

inline void ExchangeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_dev_id_){uint64_t{0u}}
    , decltype(_impl_.src_ptr_){uint64_t{0u}}
    , decltype(_impl_.dst_dev_id_){uint64_t{0u}}
    , decltype(_impl_.dst_ptr_){uint64_t{0u}}
    , decltype(_impl_.size_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExchangeData::~ExchangeData() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.ExchangeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExchangeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExchangeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExchangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.ExchangeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.src_dev_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.src_dev_id_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 src_dev_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.src_dev_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 src_ptr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.src_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 dst_dev_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dst_dev_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 dst_ptr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.dst_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.ExchangeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 src_dev_id = 1;
  if (this->_internal_src_dev_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_src_dev_id(), target);
  }

  // uint64 src_ptr = 2;
  if (this->_internal_src_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_src_ptr(), target);
  }

  // uint64 dst_dev_id = 3;
  if (this->_internal_dst_dev_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_dst_dev_id(), target);
  }

  // uint64 dst_ptr = 4;
  if (this->_internal_dst_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_dst_ptr(), target);
  }

  // uint64 size = 6;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.ExchangeData)
  return target;
}

size_t ExchangeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.ExchangeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 src_dev_id = 1;
  if (this->_internal_src_dev_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_src_dev_id());
  }

  // uint64 src_ptr = 2;
  if (this->_internal_src_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_src_ptr());
  }

  // uint64 dst_dev_id = 3;
  if (this->_internal_dst_dev_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dst_dev_id());
  }

  // uint64 dst_ptr = 4;
  if (this->_internal_dst_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dst_ptr());
  }

  // uint64 size = 6;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExchangeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeData::GetClassData() const { return &_class_data_; }


void ExchangeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExchangeData*>(&to_msg);
  auto& from = static_cast<const ExchangeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.ExchangeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_src_dev_id() != 0) {
    _this->_internal_set_src_dev_id(from._internal_src_dev_id());
  }
  if (from._internal_src_ptr() != 0) {
    _this->_internal_set_src_ptr(from._internal_src_ptr());
  }
  if (from._internal_dst_dev_id() != 0) {
    _this->_internal_set_dst_dev_id(from._internal_dst_dev_id());
  }
  if (from._internal_dst_ptr() != 0) {
    _this->_internal_set_dst_ptr(from._internal_dst_ptr());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeData::CopyFrom(const ExchangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.ExchangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeData::IsInitialized() const {
  return true;
}

void ExchangeData::InternalSwap(ExchangeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeData, _impl_.size_)
      + sizeof(ExchangeData::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(ExchangeData, _impl_.src_dev_id_)>(
          reinterpret_cast<char*>(&_impl_.src_dev_id_),
          reinterpret_cast<char*>(&other->_impl_.src_dev_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[17]);
}

// ===================================================================

class DeleteData::_Internal {
 public:
};

DeleteData::DeleteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.DeleteData)
}
DeleteData::DeleteData(const DeleteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tgt_ptr_){}
    , decltype(_impl_.device_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tgt_ptr_, &from._impl_.tgt_ptr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.device_id_) -
    reinterpret_cast<char*>(&_impl_.tgt_ptr_)) + sizeof(_impl_.device_id_));
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.DeleteData)
}

inline void DeleteData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tgt_ptr_){uint64_t{0u}}
    , decltype(_impl_.device_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteData::~DeleteData() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.DeleteData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteData::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.DeleteData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.tgt_ptr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.device_id_) -
      reinterpret_cast<char*>(&_impl_.tgt_ptr_)) + sizeof(_impl_.device_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 tgt_ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tgt_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.DeleteData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tgt_ptr = 1;
  if (this->_internal_tgt_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tgt_ptr(), target);
  }

  // int32 device_id = 2;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.DeleteData)
  return target;
}

size_t DeleteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.DeleteData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 tgt_ptr = 1;
  if (this->_internal_tgt_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tgt_ptr());
  }

  // int32 device_id = 2;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteData::GetClassData() const { return &_class_data_; }


void DeleteData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteData*>(&to_msg);
  auto& from = static_cast<const DeleteData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.DeleteData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tgt_ptr() != 0) {
    _this->_internal_set_tgt_ptr(from._internal_tgt_ptr());
  }
  if (from._internal_device_id() != 0) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteData::CopyFrom(const DeleteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.DeleteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteData::IsInitialized() const {
  return true;
}

void DeleteData::InternalSwap(DeleteData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteData, _impl_.device_id_)
      + sizeof(DeleteData::_impl_.device_id_)
      - PROTOBUF_FIELD_OFFSET(DeleteData, _impl_.tgt_ptr_)>(
          reinterpret_cast<char*>(&_impl_.tgt_ptr_),
          reinterpret_cast<char*>(&other->_impl_.tgt_ptr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[18]);
}

// ===================================================================

class TargetRegion::_Internal {
 public:
};

TargetRegion::TargetRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.TargetRegion)
}
TargetRegion::TargetRegion(const TargetRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TargetRegion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tgt_args_){from._impl_.tgt_args_}
    , /*decltype(_impl_._tgt_args_cached_byte_size_)*/{0}
    , decltype(_impl_.tgt_offsets_){from._impl_.tgt_offsets_}
    , /*decltype(_impl_._tgt_offsets_cached_byte_size_)*/{0}
    , decltype(_impl_.tgt_entry_ptr_){}
    , decltype(_impl_.device_id_){}
    , decltype(_impl_.arg_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tgt_entry_ptr_, &from._impl_.tgt_entry_ptr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.arg_num_) -
    reinterpret_cast<char*>(&_impl_.tgt_entry_ptr_)) + sizeof(_impl_.arg_num_));
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.TargetRegion)
}

inline void TargetRegion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tgt_args_){arena}
    , /*decltype(_impl_._tgt_args_cached_byte_size_)*/{0}
    , decltype(_impl_.tgt_offsets_){arena}
    , /*decltype(_impl_._tgt_offsets_cached_byte_size_)*/{0}
    , decltype(_impl_.tgt_entry_ptr_){uint64_t{0u}}
    , decltype(_impl_.device_id_){0}
    , decltype(_impl_.arg_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TargetRegion::~TargetRegion() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.TargetRegion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetRegion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tgt_args_.~RepeatedField();
  _impl_.tgt_offsets_.~RepeatedField();
}

void TargetRegion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.TargetRegion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tgt_args_.Clear();
  _impl_.tgt_offsets_.Clear();
  ::memset(&_impl_.tgt_entry_ptr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.arg_num_) -
      reinterpret_cast<char*>(&_impl_.tgt_entry_ptr_)) + sizeof(_impl_.arg_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetRegion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 tgt_args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_tgt_args(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_tgt_args(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 tgt_offsets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_tgt_offsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_tgt_offsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tgt_entry_ptr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tgt_entry_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 device_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 arg_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.arg_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetRegion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.TargetRegion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 tgt_args = 1;
  {
    int byte_size = _impl_._tgt_args_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_tgt_args(), byte_size, target);
    }
  }

  // repeated int64 tgt_offsets = 2;
  {
    int byte_size = _impl_._tgt_offsets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_tgt_offsets(), byte_size, target);
    }
  }

  // uint64 tgt_entry_ptr = 3;
  if (this->_internal_tgt_entry_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tgt_entry_ptr(), target);
  }

  // int32 device_id = 4;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_device_id(), target);
  }

  // int32 arg_num = 5;
  if (this->_internal_arg_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_arg_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.TargetRegion)
  return target;
}

size_t TargetRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.TargetRegion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 tgt_args = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.tgt_args_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tgt_args_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 tgt_offsets = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.tgt_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tgt_offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 tgt_entry_ptr = 3;
  if (this->_internal_tgt_entry_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tgt_entry_ptr());
  }

  // int32 device_id = 4;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_id());
  }

  // int32 arg_num = 5;
  if (this->_internal_arg_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_arg_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetRegion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TargetRegion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetRegion::GetClassData() const { return &_class_data_; }


void TargetRegion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TargetRegion*>(&to_msg);
  auto& from = static_cast<const TargetRegion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.TargetRegion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tgt_args_.MergeFrom(from._impl_.tgt_args_);
  _this->_impl_.tgt_offsets_.MergeFrom(from._impl_.tgt_offsets_);
  if (from._internal_tgt_entry_ptr() != 0) {
    _this->_internal_set_tgt_entry_ptr(from._internal_tgt_entry_ptr());
  }
  if (from._internal_device_id() != 0) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_arg_num() != 0) {
    _this->_internal_set_arg_num(from._internal_arg_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetRegion::CopyFrom(const TargetRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.TargetRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetRegion::IsInitialized() const {
  return true;
}

void TargetRegion::InternalSwap(TargetRegion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tgt_args_.InternalSwap(&other->_impl_.tgt_args_);
  _impl_.tgt_offsets_.InternalSwap(&other->_impl_.tgt_offsets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetRegion, _impl_.arg_num_)
      + sizeof(TargetRegion::_impl_.arg_num_)
      - PROTOBUF_FIELD_OFFSET(TargetRegion, _impl_.tgt_entry_ptr_)>(
          reinterpret_cast<char*>(&_impl_.tgt_entry_ptr_),
          reinterpret_cast<char*>(&other->_impl_.tgt_entry_ptr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetRegion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[19]);
}

// ===================================================================

class TargetTeamRegion::_Internal {
 public:
};

TargetTeamRegion::TargetTeamRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:openmp.libomptarget.remote.TargetTeamRegion)
}
TargetTeamRegion::TargetTeamRegion(const TargetTeamRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TargetTeamRegion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tgt_args_){from._impl_.tgt_args_}
    , /*decltype(_impl_._tgt_args_cached_byte_size_)*/{0}
    , decltype(_impl_.tgt_offsets_){from._impl_.tgt_offsets_}
    , /*decltype(_impl_._tgt_offsets_cached_byte_size_)*/{0}
    , decltype(_impl_.tgt_entry_ptr_){}
    , decltype(_impl_.loop_tripcount_){}
    , decltype(_impl_.device_id_){}
    , decltype(_impl_.arg_num_){}
    , decltype(_impl_.team_num_){}
    , decltype(_impl_.thread_limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tgt_entry_ptr_, &from._impl_.tgt_entry_ptr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.thread_limit_) -
    reinterpret_cast<char*>(&_impl_.tgt_entry_ptr_)) + sizeof(_impl_.thread_limit_));
  // @@protoc_insertion_point(copy_constructor:openmp.libomptarget.remote.TargetTeamRegion)
}

inline void TargetTeamRegion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tgt_args_){arena}
    , /*decltype(_impl_._tgt_args_cached_byte_size_)*/{0}
    , decltype(_impl_.tgt_offsets_){arena}
    , /*decltype(_impl_._tgt_offsets_cached_byte_size_)*/{0}
    , decltype(_impl_.tgt_entry_ptr_){uint64_t{0u}}
    , decltype(_impl_.loop_tripcount_){uint64_t{0u}}
    , decltype(_impl_.device_id_){0}
    , decltype(_impl_.arg_num_){0}
    , decltype(_impl_.team_num_){0}
    , decltype(_impl_.thread_limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TargetTeamRegion::~TargetTeamRegion() {
  // @@protoc_insertion_point(destructor:openmp.libomptarget.remote.TargetTeamRegion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetTeamRegion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tgt_args_.~RepeatedField();
  _impl_.tgt_offsets_.~RepeatedField();
}

void TargetTeamRegion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetTeamRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:openmp.libomptarget.remote.TargetTeamRegion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tgt_args_.Clear();
  _impl_.tgt_offsets_.Clear();
  ::memset(&_impl_.tgt_entry_ptr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.thread_limit_) -
      reinterpret_cast<char*>(&_impl_.tgt_entry_ptr_)) + sizeof(_impl_.thread_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetTeamRegion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 tgt_args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_tgt_args(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_tgt_args(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 tgt_offsets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_tgt_offsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_tgt_offsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tgt_entry_ptr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tgt_entry_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 loop_tripcount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.loop_tripcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 device_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 arg_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.arg_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 team_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.team_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 thread_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.thread_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetTeamRegion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openmp.libomptarget.remote.TargetTeamRegion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 tgt_args = 1;
  {
    int byte_size = _impl_._tgt_args_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_tgt_args(), byte_size, target);
    }
  }

  // repeated int64 tgt_offsets = 2;
  {
    int byte_size = _impl_._tgt_offsets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_tgt_offsets(), byte_size, target);
    }
  }

  // uint64 tgt_entry_ptr = 3;
  if (this->_internal_tgt_entry_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tgt_entry_ptr(), target);
  }

  // uint64 loop_tripcount = 4;
  if (this->_internal_loop_tripcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_loop_tripcount(), target);
  }

  // int32 device_id = 5;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_device_id(), target);
  }

  // int32 arg_num = 6;
  if (this->_internal_arg_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_arg_num(), target);
  }

  // int32 team_num = 7;
  if (this->_internal_team_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_team_num(), target);
  }

  // int32 thread_limit = 8;
  if (this->_internal_thread_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_thread_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmp.libomptarget.remote.TargetTeamRegion)
  return target;
}

size_t TargetTeamRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmp.libomptarget.remote.TargetTeamRegion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 tgt_args = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.tgt_args_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tgt_args_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 tgt_offsets = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.tgt_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tgt_offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 tgt_entry_ptr = 3;
  if (this->_internal_tgt_entry_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tgt_entry_ptr());
  }

  // uint64 loop_tripcount = 4;
  if (this->_internal_loop_tripcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_loop_tripcount());
  }

  // int32 device_id = 5;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_id());
  }

  // int32 arg_num = 6;
  if (this->_internal_arg_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_arg_num());
  }

  // int32 team_num = 7;
  if (this->_internal_team_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_num());
  }

  // int32 thread_limit = 8;
  if (this->_internal_thread_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_thread_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetTeamRegion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TargetTeamRegion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetTeamRegion::GetClassData() const { return &_class_data_; }


void TargetTeamRegion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TargetTeamRegion*>(&to_msg);
  auto& from = static_cast<const TargetTeamRegion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:openmp.libomptarget.remote.TargetTeamRegion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tgt_args_.MergeFrom(from._impl_.tgt_args_);
  _this->_impl_.tgt_offsets_.MergeFrom(from._impl_.tgt_offsets_);
  if (from._internal_tgt_entry_ptr() != 0) {
    _this->_internal_set_tgt_entry_ptr(from._internal_tgt_entry_ptr());
  }
  if (from._internal_loop_tripcount() != 0) {
    _this->_internal_set_loop_tripcount(from._internal_loop_tripcount());
  }
  if (from._internal_device_id() != 0) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_arg_num() != 0) {
    _this->_internal_set_arg_num(from._internal_arg_num());
  }
  if (from._internal_team_num() != 0) {
    _this->_internal_set_team_num(from._internal_team_num());
  }
  if (from._internal_thread_limit() != 0) {
    _this->_internal_set_thread_limit(from._internal_thread_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetTeamRegion::CopyFrom(const TargetTeamRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmp.libomptarget.remote.TargetTeamRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetTeamRegion::IsInitialized() const {
  return true;
}

void TargetTeamRegion::InternalSwap(TargetTeamRegion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tgt_args_.InternalSwap(&other->_impl_.tgt_args_);
  _impl_.tgt_offsets_.InternalSwap(&other->_impl_.tgt_offsets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetTeamRegion, _impl_.thread_limit_)
      + sizeof(TargetTeamRegion::_impl_.thread_limit_)
      - PROTOBUF_FIELD_OFFSET(TargetTeamRegion, _impl_.tgt_entry_ptr_)>(
          reinterpret_cast<char*>(&_impl_.tgt_entry_ptr_),
          reinterpret_cast<char*>(&other->_impl_.tgt_entry_ptr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetTeamRegion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_openmp_2eproto_getter, &descriptor_table_openmp_2eproto_once,
      file_level_metadata_openmp_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace remote
}  // namespace libomptarget
}  // namespace openmp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::Null*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::Null >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::Null >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::Pointer*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::Pointer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::Pointer >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::I32*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::I32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::I32 >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::I64*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::I64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::I64 >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::DevicePair*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::DevicePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::DevicePair >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::Binary*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::Binary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::Binary >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::TargetOffloadEntry*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::TargetOffloadEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::TargetOffloadEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::DeviceOffloadEntry*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::DeviceOffloadEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::DeviceOffloadEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::TargetTable*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::TargetTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::TargetTable >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::TargetDeviceImagePtr*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::TargetDeviceImagePtr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::TargetDeviceImagePtr >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::TargetDeviceImage*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::TargetDeviceImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::TargetDeviceImage >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::ImagePtrs*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::ImagePtrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::ImagePtrs >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::TargetBinaryDescription*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::TargetBinaryDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::TargetBinaryDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::AllocData*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::AllocData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::AllocData >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::SubmitData*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::SubmitData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::SubmitData >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::RetrieveData*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::RetrieveData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::RetrieveData >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::Data*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::ExchangeData*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::ExchangeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::ExchangeData >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::DeleteData*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::DeleteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::DeleteData >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::TargetRegion*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::TargetRegion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::TargetRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::openmp::libomptarget::remote::TargetTeamRegion*
Arena::CreateMaybeMessage< ::openmp::libomptarget::remote::TargetTeamRegion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openmp::libomptarget::remote::TargetTeamRegion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
