diff --git a/openmp/libomptarget/plugins/remote/transports/ucx/Server.cpp b/openmp/libomptarget/plugins/remote/transports/ucx/Server.cpp
index 2e3bbc96b40d..d0db07aa2805 100644
--- a/openmp/libomptarget/plugins/remote/transports/ucx/Server.cpp
+++ b/openmp/libomptarget/plugins/remote/transports/ucx/Server.cpp
@@ -230,7 +230,8 @@ void ProtobufServer::initDevice(std::string &Message) {
 
   Interface->send(Count, Response.SerializeAsString(), true);
 
-  SERVER_DBG("Initialized device %d, Err: %d", DeviceId.number(), Response.number())
+  SERVER_DBG("Initialized device %d, Err: %d", DeviceId.number(),
+             Response.number())
 }
 
 int32_t Server::mapHostRTLDeviceId(int32_t RTLDeviceID) {
@@ -429,21 +430,11 @@ void CustomServer::listenForConnections(const ConnectionConfigTy &Config) {
 }
 
 std::vector<std::string> MessageKindToString = {
-    "RegisterLib",
-    "UnregisterLib",
-    "IsValidBinary",
-    "GetNumberOfDevices",
-    "InitDevice",
-    "InitRequires",
-    "LoadBinary",
-    "DataAlloc",
-    "DataDelete",
-    "DataSubmit",
-    "DataRetrieve",
-    "RunTargetRegion",
-    "RunTargetTeamRegion",
-    "Count"
-};
+    "RegisterLib",         "UnregisterLib", "IsValidBinary",
+    "GetNumberOfDevices",  "InitDevice",    "InitRequires",
+    "LoadBinary",          "DataAlloc",     "DataDelete",
+    "DataSubmit",          "DataRetrieve",  "RunTargetRegion",
+    "RunTargetTeamRegion", "Count"};
 
 void CustomServer::run() {
   uint64_t Tag = 0;
@@ -452,63 +443,66 @@ void CustomServer::run() {
     auto [Type, Message] = Interface->receive();
     printf("Type: %s\n", MessageKindToString[Type].c_str());
 
-    switch (Type) {
-    case GetNumberOfDevices: {
-      getNumberOfDevices();
-      break;
-    }
-    case RegisterLib: {
-      registerLib(Message);
-      break;
-    }
-    case IsValidBinary: {
-      isValidBinary(Message);
-      break;
-    }
-    case InitRequires: {
-      initRequires(Message);
-      break;
-    }
-    case InitDevice: {
-      initDevice(Message);
-      break;
-    }
-    case LoadBinary: {
-      loadBinary(Message);
-      break;
-    }
-    case DataAlloc: {
-      dataAlloc(Message);
-      break;
-    }
-    case DataSubmit: {
-      dataSubmit(Message);
-      break;
-    }
-    case DataRetrieve: {
-      dataRetrieve(Message);
-      break;
-    }
-    case RunTargetRegion: {
-      runTargetRegion(Message);
-      break;
-    }
-    case RunTargetTeamRegion: {
-      runTargetTeamRegion(Message);
-      break;
-    }
-    case DataDelete: {
-      dataDelete(Message);
-      break;
-    }
-    case UnregisterLib: {
-      unregisterLib(Message);
-      break;
-    }
-    default: {
-      llvm_unreachable("Unimplemented Message Type");
-    }
-    }
+    Threads.emplace_back(std::thread([&, Type = Type, Message = Message]() {
+      switch (Type) {
+      case GetNumberOfDevices: {
+        getNumberOfDevices();
+        break;
+      }
+      case RegisterLib: {
+        registerLib(Message);
+        break;
+      }
+      case IsValidBinary: {
+        isValidBinary(Message);
+        break;
+      }
+      case InitRequires: {
+        initRequires(Message);
+        break;
+      }
+      case InitDevice: {
+        initDevice(Message);
+        break;
+      }
+      case LoadBinary: {
+        loadBinary(Message);
+        break;
+      }
+      case DataAlloc: {
+        dataAlloc(Message);
+        break;
+      }
+      case DataSubmit: {
+        dataSubmit(Message);
+        break;
+      }
+      case DataRetrieve: {
+        dataRetrieve(Message);
+        break;
+      }
+      case RunTargetRegion: {
+        runTargetRegion(Message);
+        break;
+      }
+      case RunTargetTeamRegion: {
+        runTargetTeamRegion(Message);
+        break;
+      }
+      case DataDelete: {
+        dataDelete(Message);
+        break;
+      }
+      case UnregisterLib: {
+        unregisterLib(Message);
+        break;
+      }
+      default: {
+        llvm_unreachable("Unimplemented Message Type");
+      }
+      }
+    }));
+
     Tag++;
   }
 }
@@ -520,7 +514,7 @@ void CustomServer::getNumberOfDevices() {
   Interface->send(GetNumberOfDevices, Response.getBuffer(), true);
 }
 
-void CustomServer::registerLib(std::string &Message) {
+void CustomServer::registerLib(std::string Message) {
   custom::TargetBinaryDescription Request(Message, TBD.get(),
                                           HostToRemoteDeviceImage);
 
@@ -529,7 +523,7 @@ void CustomServer::registerLib(std::string &Message) {
   Interface->send(RegisterLib, std::string("0"), true);
 }
 
-void CustomServer::isValidBinary(std::string &Message) {
+void CustomServer::isValidBinary(std::string Message) {
   custom::Pointer Request(Message);
 
   __tgt_device_image *DeviceImage =
@@ -547,7 +541,7 @@ void CustomServer::isValidBinary(std::string &Message) {
   Interface->send(IsValidBinary, Response.getBuffer(), true);
 }
 
-void CustomServer::initRequires(std::string &Message) {
+void CustomServer::initRequires(std::string Message) {
   custom::I64 Request(Message);
 
   for (auto &Device : PM->Devices)
@@ -557,7 +551,7 @@ void CustomServer::initRequires(std::string &Message) {
   Interface->send(InitRequires, Request.getBuffer(), true);
 }
 
-void CustomServer::initDevice(std::string &Message) {
+void CustomServer::initDevice(std::string Message) {
   custom::I32 Request(Message);
 
   custom::I32 Response(PM->Devices[Request.Value].RTL->init_device(
@@ -567,7 +561,7 @@ void CustomServer::initDevice(std::string &Message) {
   SERVER_DBG("Initialized device %d, Err: %d", Request.Value, Response.Value);
 }
 
-void CustomServer::loadBinary(std::string &Message) {
+void CustomServer::loadBinary(std::string Message) {
   custom::Binary Request(Message);
 
   __tgt_device_image *Image = HostToRemoteDeviceImage[(void *)Request.Image];
@@ -583,7 +577,7 @@ void CustomServer::loadBinary(std::string &Message) {
   }
 }
 
-void CustomServer::dataAlloc(std::string &Message) {
+void CustomServer::dataAlloc(std::string Message) {
   custom::DataAlloc Request(Message);
 
   auto TgtPtr = (uint64_t)PM->Devices[Request.DeviceId].RTL->data_alloc(
@@ -594,7 +588,7 @@ void CustomServer::dataAlloc(std::string &Message) {
   Interface->send(DataAlloc, Response.getBuffer(), true);
 }
 
-void CustomServer::dataSubmit(std::string &Message) {
+void CustomServer::dataSubmit(std::string Message) {
   custom::DataSubmit Request(Message);
 
   custom::I32 Response(PM->Devices[Request.DeviceId].RTL->data_submit(
@@ -604,7 +598,7 @@ void CustomServer::dataSubmit(std::string &Message) {
   Interface->send(DataSubmit, Response.getBuffer(), true);
 }
 
-void CustomServer::dataRetrieve(std::string &Message) {
+void CustomServer::dataRetrieve(std::string Message) {
   custom::DataRetrieve Request(Message);
 
   auto HstPtr = std::make_unique<char[]>(Request.DataSize);
@@ -618,7 +612,7 @@ void CustomServer::dataRetrieve(std::string &Message) {
   Interface->send(DataRetrieve, Response.getBuffer(), true);
 }
 
-void CustomServer::runTargetRegion(std::string &Message) {
+void CustomServer::runTargetRegion(std::string Message) {
   custom::TargetRegion Request(Message);
 
   custom::I32 Response(PM->Devices[Request.DeviceId].RTL->run_region(
@@ -629,7 +623,7 @@ void CustomServer::runTargetRegion(std::string &Message) {
   Interface->send(RunTargetRegion, Response.getBuffer(), true);
 }
 
-void CustomServer::runTargetTeamRegion(std::string &Message) {
+void CustomServer::runTargetTeamRegion(std::string Message) {
   custom::TargetTeamRegion Request(Message);
 
   custom::I32 Response(PM->Devices[Request.DeviceId].RTL->run_team_region(
@@ -640,7 +634,7 @@ void CustomServer::runTargetTeamRegion(std::string &Message) {
   Interface->send(RunTargetTeamRegion, Response.getBuffer(), true);
 }
 
-void CustomServer::dataDelete(std::string &Message) {
+void CustomServer::dataDelete(std::string Message) {
   custom::DataDelete Request(Message);
 
   custom::I32 Response(PM->Devices[Request.DeviceId].RTL->data_delete(
@@ -649,7 +643,7 @@ void CustomServer::dataDelete(std::string &Message) {
   Interface->send(DataDelete, Response.getBuffer(), true);
 }
 
-void CustomServer::unregisterLib(std::string &Message) {
+void CustomServer::unregisterLib(std::string Message) {
   custom::Pointer Request(Message);
 
   PM->RTLs.UnregisterLib(TBD.get());
diff --git a/openmp/libomptarget/plugins/remote/transports/ucx/Server.h b/openmp/libomptarget/plugins/remote/transports/ucx/Server.h
index f5f7f807e06e..4ab7e9b8982a 100644
--- a/openmp/libomptarget/plugins/remote/transports/ucx/Server.h
+++ b/openmp/libomptarget/plugins/remote/transports/ucx/Server.h
@@ -116,22 +116,24 @@ public:
 };
 
 class CustomServer : public Server {
+  std::vector<std::thread> Threads;
+
 public:
   void listenForConnections(const ConnectionConfigTy &Config) override;
 
   void run();
   void getNumberOfDevices();
-  void registerLib(std::string &Message);
-  void isValidBinary(std::string &Message);
-  void initRequires(std::string &Message);
-  void initDevice(std::string &Message);
-  void loadBinary(std::string &Message);
-  void dataAlloc(std::string &Message);
-  void dataSubmit(std::string &Message);
-  void dataRetrieve(std::string &Message);
-  void runTargetRegion(std::string &Message);
-  void runTargetTeamRegion(std::string &Message);
-  void dataDelete(std::string &Message);
-  void unregisterLib(std::string &Message);
+  void registerLib(std::string Message);
+  void isValidBinary(std::string Message);
+  void initRequires(std::string Message);
+  void initDevice(std::string Message);
+  void loadBinary(std::string Message);
+  void dataAlloc(std::string Message);
+  void dataSubmit(std::string Message);
+  void dataRetrieve(std::string Message);
+  void runTargetRegion(std::string Message);
+  void runTargetTeamRegion(std::string Message);
+  void dataDelete(std::string Message);
+  void unregisterLib(std::string Message);
 };
 } // namespace transport::ucx
